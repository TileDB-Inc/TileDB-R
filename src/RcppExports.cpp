// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tiledb.h"
#include "../inst/include/tiledb_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// libtiledb_query_set_coordinates
XPtr<tiledb::Query> libtiledb_query_set_coordinates(XPtr<tiledb::Query> query, SEXP coords, std::string dtype);
RcppExport SEXP _tiledb_libtiledb_query_set_coordinates(SEXP querySEXP, SEXP coordsSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< SEXP >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_coordinates(query, coords, dtype));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_char_alloc
XPtr<vlc_buf_t> libtiledb_query_buffer_var_char_alloc(XPtr<tiledb::Array> array, SEXP subarray, std::string attribute, int szoffsets, int szdata);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_char_alloc(SEXP arraySEXP, SEXP subarraySEXP, SEXP attributeSEXP, SEXP szoffsetsSEXP, SEXP szdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< int >::type szoffsets(szoffsetsSEXP);
    Rcpp::traits::input_parameter< int >::type szdata(szdataSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_char_alloc(array, subarray, attribute, szoffsets, szdata));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_vec_alloc
XPtr<vlv_buf_t> libtiledb_query_buffer_var_vec_alloc(XPtr<tiledb::Array> array, SEXP subarray, std::string attribute, int szoffsets, int szdata);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_vec_alloc(SEXP arraySEXP, SEXP subarraySEXP, SEXP attributeSEXP, SEXP szoffsetsSEXP, SEXP szdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< int >::type szoffsets(szoffsetsSEXP);
    Rcpp::traits::input_parameter< int >::type szdata(szdataSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_vec_alloc(array, subarray, attribute, szoffsets, szdata));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_coords
std::string libtiledb_coords();
RcppExport SEXP _tiledb_libtiledb_coords() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libtiledb_coords());
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_max_buffer_elements_with_type
R_xlen_t libtiledb_array_max_buffer_elements_with_type(XPtr<tiledb::Array> array, SEXP subarray, std::string attribute, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_array_max_buffer_elements_with_type(SEXP arraySEXP, SEXP subarraySEXP, SEXP attributeSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_max_buffer_elements_with_type(array, subarray, attribute, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_max_buffer_elements
R_xlen_t libtiledb_array_max_buffer_elements(XPtr<tiledb::Array> array, SEXP subarray, std::string attribute);
RcppExport SEXP _tiledb_libtiledb_array_max_buffer_elements(SEXP arraySEXP, SEXP subarraySEXP, SEXP attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_max_buffer_elements(array, subarray, attribute));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_max_buffer_elements_vec
NumericVector libtiledb_array_max_buffer_elements_vec(XPtr<tiledb::Array> array, SEXP subarray, std::string attribute);
RcppExport SEXP _tiledb_libtiledb_array_max_buffer_elements_vec(SEXP arraySEXP, SEXP subarraySEXP, SEXP attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_max_buffer_elements_vec(array, subarray, attribute));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_datatype_R_type
std::string tiledb_datatype_R_type(std::string datatype);
RcppExport SEXP _tiledb_tiledb_datatype_R_type(SEXP datatypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type datatype(datatypeSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_datatype_R_type(datatype));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_version
NumericVector libtiledb_version();
RcppExport SEXP _tiledb_libtiledb_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libtiledb_version());
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx
XPtr<tiledb::Context> libtiledb_ctx(Nullable<XPtr<tiledb::Config>> config);
RcppExport SEXP _tiledb_libtiledb_ctx(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_ctx(config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx_config
XPtr<tiledb::Config> libtiledb_ctx_config(XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_ctx_config(SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_ctx_config(ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx_is_supported_fs
bool libtiledb_ctx_is_supported_fs(XPtr<tiledb::Context> ctx, std::string scheme);
RcppExport SEXP _tiledb_libtiledb_ctx_is_supported_fs(SEXP ctxSEXP, SEXP schemeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type scheme(schemeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_ctx_is_supported_fs(ctx, scheme));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx_set_tag
void libtiledb_ctx_set_tag(XPtr<tiledb::Context> ctx, std::string key, std::string value);
RcppExport SEXP _tiledb_libtiledb_ctx_set_tag(SEXP ctxSEXP, SEXP keySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    libtiledb_ctx_set_tag(ctx, key, value);
    return R_NilValue;
END_RCPP
}
// libtiledb_config
XPtr<tiledb::Config> libtiledb_config(Nullable<CharacterVector> config);
RcppExport SEXP _tiledb_libtiledb_config(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config(config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_save_to_file
std::string libtiledb_config_save_to_file(XPtr<tiledb::Config> config, std::string filename);
RcppExport SEXP _tiledb_libtiledb_config_save_to_file(SEXP configSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_save_to_file(config, filename));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_load_from_file
XPtr<tiledb::Config> libtiledb_config_load_from_file(std::string filename);
RcppExport SEXP _tiledb_libtiledb_config_load_from_file(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_load_from_file(filename));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_vector
CharacterVector libtiledb_config_vector(XPtr<tiledb::Config> config);
RcppExport SEXP _tiledb_libtiledb_config_vector(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_vector(config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_set
XPtr<tiledb::Config> libtiledb_config_set(XPtr<tiledb::Config> config, std::string param, std::string value);
RcppExport SEXP _tiledb_libtiledb_config_set(SEXP configSEXP, SEXP paramSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type param(paramSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_set(config, param, value));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_get
CharacterVector libtiledb_config_get(XPtr<tiledb::Config> config, CharacterVector params);
RcppExport SEXP _tiledb_libtiledb_config_get(SEXP configSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_get(config, params));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_unset
XPtr<tiledb::Config> libtiledb_config_unset(XPtr<tiledb::Config> config, std::string param);
RcppExport SEXP _tiledb_libtiledb_config_unset(SEXP configSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_unset(config, param));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_dump
void libtiledb_config_dump(XPtr<tiledb::Config> config);
RcppExport SEXP _tiledb_libtiledb_config_dump(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    libtiledb_config_dump(config);
    return R_NilValue;
END_RCPP
}
// libtiledb_dim
XPtr<tiledb::Dimension> libtiledb_dim(XPtr<tiledb::Context> ctx, std::string name, std::string type, SEXP domain, SEXP tile_extent);
RcppExport SEXP _tiledb_libtiledb_dim(SEXP ctxSEXP, SEXP nameSEXP, SEXP typeSEXP, SEXP domainSEXP, SEXP tile_extentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tile_extent(tile_extentSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim(ctx, name, type, domain, tile_extent));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_name
std::string libtiledb_dim_get_name(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_name(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_name(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_domain
SEXP libtiledb_dim_get_domain(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_domain(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_domain(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_tile_extent
SEXP libtiledb_dim_get_tile_extent(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_tile_extent(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_tile_extent(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_datatype
std::string libtiledb_dim_get_datatype(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_datatype(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_datatype(dim));
    return rcpp_result_gen;
END_RCPP
}
// dim_domain_subarray
NumericVector dim_domain_subarray(NumericVector domain, NumericVector subscript);
RcppExport SEXP _tiledb_dim_domain_subarray(SEXP domainSEXP, SEXP subscriptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subscript(subscriptSEXP);
    rcpp_result_gen = Rcpp::wrap(dim_domain_subarray(domain, subscript));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_cell_val_num
int libtiledb_dim_get_cell_val_num(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_cell_val_num(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_cell_val_num(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain
XPtr<tiledb::Domain> libtiledb_domain(XPtr<tiledb::Context> ctx, List dims);
RcppExport SEXP _tiledb_libtiledb_domain(SEXP ctxSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< List >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain(ctx, dims));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_type
std::string libtiledb_domain_get_type(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_get_type(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_type(domain));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_ndim
int libtiledb_domain_get_ndim(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_get_ndim(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_ndim(domain));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_dimensions
List libtiledb_domain_get_dimensions(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_get_dimensions(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_dimensions(domain));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_dump
void libtiledb_domain_dump(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_dump(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    libtiledb_domain_dump(domain);
    return R_NilValue;
END_RCPP
}
// libtiledb_filter
XPtr<tiledb::Filter> libtiledb_filter(XPtr<tiledb::Context> ctx, std::string filter);
RcppExport SEXP _tiledb_libtiledb_filter(SEXP ctxSEXP, SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter(ctx, filter));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_get_type
std::string libtiledb_filter_get_type(XPtr<tiledb::Filter> filter);
RcppExport SEXP _tiledb_libtiledb_filter_get_type(SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Filter> >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_get_type(filter));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_get_option
R_xlen_t libtiledb_filter_get_option(XPtr<tiledb::Filter> filter, std::string filter_option_str);
RcppExport SEXP _tiledb_libtiledb_filter_get_option(SEXP filterSEXP, SEXP filter_option_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Filter> >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_option_str(filter_option_strSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_get_option(filter, filter_option_str));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_set_option
void libtiledb_filter_set_option(XPtr<tiledb::Filter> filter, std::string filter_option_str, int value);
RcppExport SEXP _tiledb_libtiledb_filter_set_option(SEXP filterSEXP, SEXP filter_option_strSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Filter> >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_option_str(filter_option_strSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    libtiledb_filter_set_option(filter, filter_option_str, value);
    return R_NilValue;
END_RCPP
}
// libtiledb_filter_list
XPtr<tiledb::FilterList> libtiledb_filter_list(XPtr<tiledb::Context> ctx, List filters);
RcppExport SEXP _tiledb_libtiledb_filter_list(SEXP ctxSEXP, SEXP filtersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< List >::type filters(filtersSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list(ctx, filters));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_list_set_max_chunk_size
void libtiledb_filter_list_set_max_chunk_size(XPtr<tiledb::FilterList> filterList, uint32_t max_chunk_sie);
RcppExport SEXP _tiledb_libtiledb_filter_list_set_max_chunk_size(SEXP filterListSEXP, SEXP max_chunk_sieSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_chunk_sie(max_chunk_sieSEXP);
    libtiledb_filter_list_set_max_chunk_size(filterList, max_chunk_sie);
    return R_NilValue;
END_RCPP
}
// libtiledb_filter_list_get_max_chunk_size
int libtiledb_filter_list_get_max_chunk_size(XPtr<tiledb::FilterList> filterList);
RcppExport SEXP _tiledb_libtiledb_filter_list_get_max_chunk_size(SEXP filterListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list_get_max_chunk_size(filterList));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_list_get_nfilters
int libtiledb_filter_list_get_nfilters(XPtr<tiledb::FilterList> filterList);
RcppExport SEXP _tiledb_libtiledb_filter_list_get_nfilters(SEXP filterListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list_get_nfilters(filterList));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_list_get_filter_from_index
XPtr<tiledb::Filter> libtiledb_filter_list_get_filter_from_index(XPtr<tiledb::FilterList> filterList, uint32_t filter_index);
RcppExport SEXP _tiledb_libtiledb_filter_list_get_filter_from_index(SEXP filterListSEXP, SEXP filter_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type filter_index(filter_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list_get_filter_from_index(filterList, filter_index));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute
XPtr<tiledb::Attribute> libtiledb_attribute(XPtr<tiledb::Context> ctx, std::string name, std::string type, XPtr<tiledb::FilterList> filter_list, int ncells);
RcppExport SEXP _tiledb_libtiledb_attribute(SEXP ctxSEXP, SEXP nameSEXP, SEXP typeSEXP, SEXP filter_listSEXP, SEXP ncellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filter_list(filter_listSEXP);
    Rcpp::traits::input_parameter< int >::type ncells(ncellsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute(ctx, name, type, filter_list, ncells));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_name
std::string libtiledb_attribute_get_name(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_name(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_name(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_type
std::string libtiledb_attribute_get_type(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_type(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_type(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_cell_size
double libtiledb_attribute_get_cell_size(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_cell_size(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_cell_size(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_filter_list
XPtr<tiledb::FilterList> libtiledb_attribute_get_filter_list(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_filter_list(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_filter_list(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_cell_val_num
int libtiledb_attribute_get_cell_val_num(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_cell_val_num(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_cell_val_num(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_set_cell_val_num
void libtiledb_attribute_set_cell_val_num(XPtr<tiledb::Attribute> attr, int num);
RcppExport SEXP _tiledb_libtiledb_attribute_set_cell_val_num(SEXP attrSEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    libtiledb_attribute_set_cell_val_num(attr, num);
    return R_NilValue;
END_RCPP
}
// libtiledb_attribute_is_variable_sized
bool libtiledb_attribute_is_variable_sized(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_is_variable_sized(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_is_variable_sized(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_dump
void libtiledb_attribute_dump(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_dump(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    libtiledb_attribute_dump(attr);
    return R_NilValue;
END_RCPP
}
// libtiledb_attribute_set_fill_value
void libtiledb_attribute_set_fill_value(XPtr<tiledb::Attribute> attr, SEXP val);
RcppExport SEXP _tiledb_libtiledb_attribute_set_fill_value(SEXP attrSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type val(valSEXP);
    libtiledb_attribute_set_fill_value(attr, val);
    return R_NilValue;
END_RCPP
}
// libtiledb_attribute_get_fill_value
SEXP libtiledb_attribute_get_fill_value(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_fill_value(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_fill_value(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema
XPtr<tiledb::ArraySchema> libtiledb_array_schema(XPtr<tiledb::Context> ctx, XPtr<tiledb::Domain> domain, List attributes, std::string cell_order, std::string tile_order, Nullable<XPtr<tiledb::FilterList>> coords_filter_list, Nullable<XPtr<tiledb::FilterList>> offsets_filter_list, bool sparse);
RcppExport SEXP _tiledb_libtiledb_array_schema(SEXP ctxSEXP, SEXP domainSEXP, SEXP attributesSEXP, SEXP cell_orderSEXP, SEXP tile_orderSEXP, SEXP coords_filter_listSEXP, SEXP offsets_filter_listSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< List >::type attributes(attributesSEXP);
    Rcpp::traits::input_parameter< std::string >::type cell_order(cell_orderSEXP);
    Rcpp::traits::input_parameter< std::string >::type tile_order(tile_orderSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::FilterList>> >::type coords_filter_list(coords_filter_listSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::FilterList>> >::type offsets_filter_list(offsets_filter_listSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema(ctx, domain, attributes, cell_order, tile_order, coords_filter_list, offsets_filter_list, sparse));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_create
XPtr<tiledb::ArraySchema> libtiledb_array_schema_create(XPtr<tiledb::Context> ctx, std::string atstr);
RcppExport SEXP _tiledb_libtiledb_array_schema_create(SEXP ctxSEXP, SEXP atstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type atstr(atstrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_create(ctx, atstr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_load
XPtr<tiledb::ArraySchema> libtiledb_array_schema_load(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_array_schema_load(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_load(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_load_with_key
XPtr<tiledb::ArraySchema> libtiledb_array_schema_load_with_key(XPtr<tiledb::Context> ctx, std::string uri, std::string key);
RcppExport SEXP _tiledb_libtiledb_array_schema_load_with_key(SEXP ctxSEXP, SEXP uriSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_load_with_key(ctx, uri, key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_domain
void libtiledb_array_schema_set_domain(XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::Domain> dom);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_domain(SEXP schemaSEXP, SEXP domSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type dom(domSEXP);
    libtiledb_array_schema_set_domain(schema, dom);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_domain
XPtr<tiledb::Domain> libtiledb_array_schema_get_domain(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_domain(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_domain(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_add_attribute
void libtiledb_array_schema_add_attribute(XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_array_schema_add_attribute(SEXP schemaSEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    libtiledb_array_schema_add_attribute(schema, attr);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_attributes
List libtiledb_array_schema_attributes(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_attributes(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_attributes(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_array_type
std::string libtiledb_array_schema_get_array_type(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_array_type(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_array_type(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_cell_order
void libtiledb_array_schema_set_cell_order(XPtr<tiledb::ArraySchema> schema, std::string ord);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_cell_order(SEXP schemaSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ord(ordSEXP);
    libtiledb_array_schema_set_cell_order(schema, ord);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_cell_order
std::string libtiledb_array_schema_get_cell_order(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_cell_order(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_cell_order(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_tile_order
void libtiledb_array_schema_set_tile_order(XPtr<tiledb::ArraySchema> schema, std::string ord);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_tile_order(SEXP schemaSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ord(ordSEXP);
    libtiledb_array_schema_set_tile_order(schema, ord);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_tile_order
std::string libtiledb_array_schema_get_tile_order(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_tile_order(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_tile_order(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_capacity
void libtiledb_array_schema_set_capacity(XPtr<tiledb::ArraySchema> schema, int cap);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_capacity(SEXP schemaSEXP, SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< int >::type cap(capSEXP);
    libtiledb_array_schema_set_capacity(schema, cap);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_capacity
int libtiledb_array_schema_get_capacity(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_capacity(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_capacity(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_allows_dups
bool libtiledb_array_schema_get_allows_dups(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_allows_dups(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_allows_dups(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_allows_dups
XPtr<tiledb::ArraySchema> libtiledb_array_schema_set_allows_dups(XPtr<tiledb::ArraySchema> schema, bool allows_dups);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_allows_dups(SEXP schemaSEXP, SEXP allows_dupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< bool >::type allows_dups(allows_dupsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_set_allows_dups(schema, allows_dups));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_coords_filter_list
XPtr<tiledb::FilterList> libtiledb_array_schema_get_coords_filter_list(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_coords_filter_list(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_coords_filter_list(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_offsets_filter_list
XPtr<tiledb::FilterList> libtiledb_array_schema_offsets_filter_list(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_offsets_filter_list(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_offsets_filter_list(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_attribute_num
int libtiledb_array_schema_get_attribute_num(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_attribute_num(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_attribute_num(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_attribute_from_index
XPtr<tiledb::Attribute> libtiledb_array_schema_get_attribute_from_index(XPtr<tiledb::ArraySchema> schema, int ind);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_attribute_from_index(SEXP schemaSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_attribute_from_index(schema, ind));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_attribute_from_name
XPtr<tiledb::Attribute> libtiledb_array_schema_get_attribute_from_name(XPtr<tiledb::ArraySchema> schema, std::string name);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_attribute_from_name(SEXP schemaSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_attribute_from_name(schema, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_has_attribute
bool libtiledb_array_schema_has_attribute(XPtr<tiledb::ArraySchema> schema, std::string name);
RcppExport SEXP _tiledb_libtiledb_array_schema_has_attribute(SEXP schemaSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_has_attribute(schema, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_sparse
bool libtiledb_array_schema_sparse(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_sparse(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_sparse(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_dump
void libtiledb_array_schema_dump(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_dump(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    libtiledb_array_schema_dump(schema);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_check
void libtiledb_array_schema_check(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_check(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    libtiledb_array_schema_check(schema);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_create
std::string libtiledb_array_create(std::string uri, XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_create(SEXP uriSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_create(uri, schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_create_with_key
std::string libtiledb_array_create_with_key(std::string uri, XPtr<tiledb::ArraySchema> schema, std::string encryption_key);
RcppExport SEXP _tiledb_libtiledb_array_create_with_key(SEXP uriSEXP, SEXP schemaSEXP, SEXP encryption_keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type encryption_key(encryption_keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_create_with_key(uri, schema, encryption_key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open
XPtr<tiledb::Array> libtiledb_array_open(XPtr<tiledb::Context> ctx, std::string uri, std::string type);
RcppExport SEXP _tiledb_libtiledb_array_open(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open(ctx, uri, type));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_at
XPtr<tiledb::Array> libtiledb_array_open_at(XPtr<tiledb::Context> ctx, std::string uri, std::string type, Datetime tstamp);
RcppExport SEXP _tiledb_libtiledb_array_open_at(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP, SEXP tstampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Datetime >::type tstamp(tstampSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_at(ctx, uri, type, tstamp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_with_key
XPtr<tiledb::Array> libtiledb_array_open_with_key(XPtr<tiledb::Context> ctx, std::string uri, std::string type, std::string enc_key);
RcppExport SEXP _tiledb_libtiledb_array_open_with_key(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP, SEXP enc_keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type enc_key(enc_keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_with_key(ctx, uri, type, enc_key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_at_with_key
XPtr<tiledb::Array> libtiledb_array_open_at_with_key(XPtr<tiledb::Context> ctx, std::string uri, std::string type, std::string enc_key, Datetime tstamp);
RcppExport SEXP _tiledb_libtiledb_array_open_at_with_key(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP, SEXP enc_keySEXP, SEXP tstampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type enc_key(enc_keySEXP);
    Rcpp::traits::input_parameter< Datetime >::type tstamp(tstampSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_at_with_key(ctx, uri, type, enc_key, tstamp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_with_ptr
XPtr<tiledb::Array> libtiledb_array_open_with_ptr(XPtr<tiledb::Array> array, std::string query_type);
RcppExport SEXP _tiledb_libtiledb_array_open_with_ptr(SEXP arraySEXP, SEXP query_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type query_type(query_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_with_ptr(array, query_type));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_is_open
bool libtiledb_array_is_open(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_is_open(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_is_open(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_is_open_for_reading
bool libtiledb_array_is_open_for_reading(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_is_open_for_reading(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_is_open_for_reading(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_is_open_for_writing
bool libtiledb_array_is_open_for_writing(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_is_open_for_writing(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_is_open_for_writing(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_uri
std::string libtiledb_array_get_uri(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_uri(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_uri(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_schema
XPtr<tiledb::ArraySchema> libtiledb_array_get_schema(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_schema(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_schema(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_reopen
XPtr<tiledb::Array> libtiledb_array_reopen(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_reopen(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_reopen(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_close
XPtr<tiledb::Array> libtiledb_array_close(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_close(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_close(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_query_type
std::string libtiledb_array_query_type(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_query_type(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_query_type(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain
List libtiledb_array_get_non_empty_domain(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain_var_from_name
CharacterVector libtiledb_array_get_non_empty_domain_var_from_name(XPtr<tiledb::Array> array, std::string name);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain_var_from_name(SEXP arraySEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain_var_from_name(array, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain_var_from_index
CharacterVector libtiledb_array_get_non_empty_domain_var_from_index(XPtr<tiledb::Array> array, int32_t idx, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain_var_from_index(SEXP arraySEXP, SEXP idxSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int32_t >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain_var_from_index(array, idx, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain_from_name
NumericVector libtiledb_array_get_non_empty_domain_from_name(XPtr<tiledb::Array> array, std::string name, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain_from_name(SEXP arraySEXP, SEXP nameSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain_from_name(array, name, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_non_empty_domain_from_index
NumericVector libtiledb_array_non_empty_domain_from_index(XPtr<tiledb::Array> array, int32_t idx, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_array_non_empty_domain_from_index(SEXP arraySEXP, SEXP idxSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int32_t >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_non_empty_domain_from_index(array, idx, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_consolidate
void libtiledb_array_consolidate(XPtr<tiledb::Context> ctx, std::string uri, Nullable<XPtr<tiledb::Config>> cfgptr);
RcppExport SEXP _tiledb_libtiledb_array_consolidate(SEXP ctxSEXP, SEXP uriSEXP, SEXP cfgptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type cfgptr(cfgptrSEXP);
    libtiledb_array_consolidate(ctx, uri, cfgptr);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_put_metadata
bool libtiledb_array_put_metadata(XPtr<tiledb::Array> array, std::string key, SEXP obj);
RcppExport SEXP _tiledb_libtiledb_array_put_metadata(SEXP arraySEXP, SEXP keySEXP, SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_put_metadata(array, key, obj));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_metadata_num
R_xlen_t libtiledb_array_get_metadata_num(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_metadata_num(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_metadata_num(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_metadata_from_index
SEXP libtiledb_array_get_metadata_from_index(XPtr<tiledb::Array> array, int idx);
RcppExport SEXP _tiledb_libtiledb_array_get_metadata_from_index(SEXP arraySEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_metadata_from_index(array, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_metadata_list
SEXP libtiledb_array_get_metadata_list(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_metadata_list(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_metadata_list(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_delete_metadata
void libtiledb_array_delete_metadata(XPtr<tiledb::Array> array, std::string key);
RcppExport SEXP _tiledb_libtiledb_array_delete_metadata(SEXP arraySEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    libtiledb_array_delete_metadata(array, key);
    return R_NilValue;
END_RCPP
}
// libtiledb_query
XPtr<tiledb::Query> libtiledb_query(XPtr<tiledb::Context> ctx, XPtr<tiledb::Array> array, std::string type);
RcppExport SEXP _tiledb_libtiledb_query(SEXP ctxSEXP, SEXP arraySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query(ctx, array, type));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_type
std::string libtiledb_query_type(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_type(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_type(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_layout
XPtr<tiledb::Query> libtiledb_query_set_layout(XPtr<tiledb::Query> query, std::string layout);
RcppExport SEXP _tiledb_libtiledb_query_set_layout(SEXP querySEXP, SEXP layoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type layout(layoutSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_layout(query, layout));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_subarray_with_type
XPtr<tiledb::Query> libtiledb_query_set_subarray_with_type(XPtr<tiledb::Query> query, SEXP subarray, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_query_set_subarray_with_type(SEXP querySEXP, SEXP subarraySEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_subarray_with_type(query, subarray, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_subarray
XPtr<tiledb::Query> libtiledb_query_set_subarray(XPtr<tiledb::Query> query, SEXP subarray);
RcppExport SEXP _tiledb_libtiledb_query_set_subarray(SEXP querySEXP, SEXP subarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_subarray(query, subarray));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer
XPtr<tiledb::Query> libtiledb_query_set_buffer(XPtr<tiledb::Query> query, std::string attr, SEXP buffer);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer(SEXP querySEXP, SEXP attrSEXP, SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer(query, attr, buffer));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_char_alloc_direct
XPtr<vlc_buf_t> libtiledb_query_buffer_var_char_alloc_direct(int szoffsets, int szdata);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_char_alloc_direct(SEXP szoffsetsSEXP, SEXP szdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type szoffsets(szoffsetsSEXP);
    Rcpp::traits::input_parameter< int >::type szdata(szdataSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_char_alloc_direct(szoffsets, szdata));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_char_create
XPtr<vlc_buf_t> libtiledb_query_buffer_var_char_create(IntegerVector intoffsets, std::string data);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_char_create(SEXP intoffsetsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type intoffsets(intoffsetsSEXP);
    Rcpp::traits::input_parameter< std::string >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_char_create(intoffsets, data));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer_var_char
XPtr<tiledb::Query> libtiledb_query_set_buffer_var_char(XPtr<tiledb::Query> query, std::string attr, XPtr<vlc_buf_t> bufptr);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer_var_char(SEXP querySEXP, SEXP attrSEXP, SEXP bufptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type bufptr(bufptrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer_var_char(query, attr, bufptr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_var_char
CharacterMatrix libtiledb_query_get_buffer_var_char(XPtr<vlc_buf_t> bufptr, int32_t len, int32_t nchar);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_var_char(SEXP bufptrSEXP, SEXP lenSEXP, SEXP ncharSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type bufptr(bufptrSEXP);
    Rcpp::traits::input_parameter< int32_t >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int32_t >::type nchar(ncharSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_var_char(bufptr, len, nchar));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_var_char_simple
std::string libtiledb_query_get_buffer_var_char_simple(XPtr<vlc_buf_t> bufptr);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_var_char_simple(SEXP bufptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type bufptr(bufptrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_var_char_simple(bufptr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_vec_create
XPtr<vlv_buf_t> libtiledb_query_buffer_var_vec_create(IntegerVector intoffsets, SEXP data);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_vec_create(SEXP intoffsetsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type intoffsets(intoffsetsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_vec_create(intoffsets, data));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer_var_vec
XPtr<tiledb::Query> libtiledb_query_set_buffer_var_vec(XPtr<tiledb::Query> query, std::string attr, XPtr<vlv_buf_t> buf);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer_var_vec(SEXP querySEXP, SEXP attrSEXP, SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<vlv_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer_var_vec(query, attr, buf));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_var_vec
List libtiledb_query_get_buffer_var_vec(XPtr<tiledb::Query> query, std::string attr, XPtr<vlv_buf_t> buf);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_var_vec(SEXP querySEXP, SEXP attrSEXP, SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<vlv_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_var_vec(query, attr, buf));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_alloc_ptr
XPtr<query_buf_t> libtiledb_query_buffer_alloc_ptr(XPtr<tiledb::Array> array, std::string domaintype, R_xlen_t ncells);
RcppExport SEXP _tiledb_libtiledb_query_buffer_alloc_ptr(SEXP arraySEXP, SEXP domaintypeSEXP, SEXP ncellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type domaintype(domaintypeSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type ncells(ncellsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_alloc_ptr(array, domaintype, ncells));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_assign_ptr
XPtr<query_buf_t> libtiledb_query_buffer_assign_ptr(XPtr<query_buf_t> buf, std::string dtype, SEXP vec);
RcppExport SEXP _tiledb_libtiledb_query_buffer_assign_ptr(SEXP bufSEXP, SEXP dtypeSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<query_buf_t> >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_assign_ptr(buf, dtype, vec));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer_ptr
XPtr<tiledb::Query> libtiledb_query_set_buffer_ptr(XPtr<tiledb::Query> query, std::string attr, XPtr<query_buf_t> buf);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer_ptr(SEXP querySEXP, SEXP attrSEXP, SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<query_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer_ptr(query, attr, buf));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_ptr
RObject libtiledb_query_get_buffer_ptr(XPtr<query_buf_t> buf);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_ptr(SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<query_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_ptr(buf));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_submit
XPtr<tiledb::Query> libtiledb_query_submit(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_submit(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_submit(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_finalize
XPtr<tiledb::Query> libtiledb_query_finalize(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_finalize(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_finalize(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_status
std::string libtiledb_query_status(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_status(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_status(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_result_buffer_elements
R_xlen_t libtiledb_query_result_buffer_elements(XPtr<tiledb::Query> query, std::string attribute);
RcppExport SEXP _tiledb_libtiledb_query_result_buffer_elements(SEXP querySEXP, SEXP attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_result_buffer_elements(query, attribute));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_fragment_num
int libtiledb_query_get_fragment_num(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_get_fragment_num(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_fragment_num(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_fragment_uri
std::string libtiledb_query_get_fragment_uri(XPtr<tiledb::Query> query, int idx);
RcppExport SEXP _tiledb_libtiledb_query_get_fragment_uri(SEXP querySEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_fragment_uri(query, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_add_range
XPtr<tiledb::Query> libtiledb_query_add_range(XPtr<tiledb::Query> query, int iidx, SEXP starts, SEXP ends, SEXP strides);
RcppExport SEXP _tiledb_libtiledb_query_add_range(SEXP querySEXP, SEXP iidxSEXP, SEXP startsSEXP, SEXP endsSEXP, SEXP stridesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type iidx(iidxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type strides(stridesSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_add_range(query, iidx, starts, ends, strides));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_add_range_with_type
XPtr<tiledb::Query> libtiledb_query_add_range_with_type(XPtr<tiledb::Query> query, int iidx, std::string typestr, SEXP starts, SEXP ends, SEXP strides);
RcppExport SEXP _tiledb_libtiledb_query_add_range_with_type(SEXP querySEXP, SEXP iidxSEXP, SEXP typestrSEXP, SEXP startsSEXP, SEXP endsSEXP, SEXP stridesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type iidx(iidxSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type strides(stridesSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_add_range_with_type(query, iidx, typestr, starts, ends, strides));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_est_result_size
R_xlen_t libtiledb_query_get_est_result_size(XPtr<tiledb::Query> query, std::string attr);
RcppExport SEXP _tiledb_libtiledb_query_get_est_result_size(SEXP querySEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_est_result_size(query, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_est_result_size_var
NumericVector libtiledb_query_get_est_result_size_var(XPtr<tiledb::Query> query, std::string attr);
RcppExport SEXP _tiledb_libtiledb_query_get_est_result_size_var(SEXP querySEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_est_result_size_var(query, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_zip_coords_numeric
NumericVector libtiledb_zip_coords_numeric(List coords, R_xlen_t coord_length);
RcppExport SEXP _tiledb_libtiledb_zip_coords_numeric(SEXP coordsSEXP, SEXP coord_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type coord_length(coord_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_zip_coords_numeric(coords, coord_length));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_zip_coords_integer
IntegerVector libtiledb_zip_coords_integer(List coords, R_xlen_t coord_length);
RcppExport SEXP _tiledb_libtiledb_zip_coords_integer(SEXP coordsSEXP, SEXP coord_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type coord_length(coord_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_zip_coords_integer(coords, coord_length));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_create
std::string libtiledb_group_create(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_group_create(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_create(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_type
std::string libtiledb_object_type(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_object_type(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_type(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_remove
std::string libtiledb_object_remove(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_object_remove(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_remove(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_move
std::string libtiledb_object_move(XPtr<tiledb::Context> ctx, std::string old_uri, std::string new_uri);
RcppExport SEXP _tiledb_libtiledb_object_move(SEXP ctxSEXP, SEXP old_uriSEXP, SEXP new_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type old_uri(old_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_uri(new_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_move(ctx, old_uri, new_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_walk
DataFrame libtiledb_object_walk(XPtr<tiledb::Context> ctx, std::string uri, std::string order, bool recursive);
RcppExport SEXP _tiledb_libtiledb_object_walk(SEXP ctxSEXP, SEXP uriSEXP, SEXP orderSEXP, SEXP recursiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type recursive(recursiveSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_walk(ctx, uri, order, recursive));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs
XPtr<tiledb::VFS> libtiledb_vfs(XPtr<tiledb::Context> ctx, Nullable<XPtr<tiledb::Config>> config);
RcppExport SEXP _tiledb_libtiledb_vfs(SEXP ctxSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs(ctx, config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_create_bucket
std::string libtiledb_vfs_create_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_create_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_create_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_remove_bucket
std::string libtiledb_vfs_remove_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_remove_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_remove_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_bucket
bool libtiledb_vfs_is_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_empty_bucket
bool libtiledb_vfs_is_empty_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_empty_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_empty_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_empty_bucket
std::string libtiledb_vfs_empty_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_empty_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_empty_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_create_dir
std::string libtiledb_vfs_create_dir(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_create_dir(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_create_dir(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_dir
bool libtiledb_vfs_is_dir(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_dir(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_dir(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_remove_dir
std::string libtiledb_vfs_remove_dir(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_remove_dir(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_remove_dir(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_file
bool libtiledb_vfs_is_file(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_file(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_file(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_remove_file
std::string libtiledb_vfs_remove_file(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_remove_file(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_remove_file(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_file_size
R_xlen_t libtiledb_vfs_file_size(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_file_size(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_file_size(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_move_file
std::string libtiledb_vfs_move_file(XPtr<tiledb::VFS> vfs, std::string old_uri, std::string new_uri);
RcppExport SEXP _tiledb_libtiledb_vfs_move_file(SEXP vfsSEXP, SEXP old_uriSEXP, SEXP new_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type old_uri(old_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_uri(new_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_move_file(vfs, old_uri, new_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_move_dir
std::string libtiledb_vfs_move_dir(XPtr<tiledb::VFS> vfs, std::string old_uri, std::string new_uri);
RcppExport SEXP _tiledb_libtiledb_vfs_move_dir(SEXP vfsSEXP, SEXP old_uriSEXP, SEXP new_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type old_uri(old_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_uri(new_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_move_dir(vfs, old_uri, new_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_touch
std::string libtiledb_vfs_touch(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_touch(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_touch(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_stats_enable
void libtiledb_stats_enable();
RcppExport SEXP _tiledb_libtiledb_stats_enable() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    libtiledb_stats_enable();
    return R_NilValue;
END_RCPP
}
// libtiledb_stats_disable
void libtiledb_stats_disable();
RcppExport SEXP _tiledb_libtiledb_stats_disable() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    libtiledb_stats_disable();
    return R_NilValue;
END_RCPP
}
// libtiledb_stats_dump
void libtiledb_stats_dump(std::string path);
RcppExport SEXP _tiledb_libtiledb_stats_dump(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    libtiledb_stats_dump(path);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tiledb_libtiledb_query_set_coordinates", (DL_FUNC) &_tiledb_libtiledb_query_set_coordinates, 3},
    {"_tiledb_libtiledb_query_buffer_var_char_alloc", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_char_alloc, 5},
    {"_tiledb_libtiledb_query_buffer_var_vec_alloc", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_vec_alloc, 5},
    {"_tiledb_libtiledb_coords", (DL_FUNC) &_tiledb_libtiledb_coords, 0},
    {"_tiledb_libtiledb_array_max_buffer_elements_with_type", (DL_FUNC) &_tiledb_libtiledb_array_max_buffer_elements_with_type, 4},
    {"_tiledb_libtiledb_array_max_buffer_elements", (DL_FUNC) &_tiledb_libtiledb_array_max_buffer_elements, 3},
    {"_tiledb_libtiledb_array_max_buffer_elements_vec", (DL_FUNC) &_tiledb_libtiledb_array_max_buffer_elements_vec, 3},
    {"_tiledb_tiledb_datatype_R_type", (DL_FUNC) &_tiledb_tiledb_datatype_R_type, 1},
    {"_tiledb_libtiledb_version", (DL_FUNC) &_tiledb_libtiledb_version, 0},
    {"_tiledb_libtiledb_ctx", (DL_FUNC) &_tiledb_libtiledb_ctx, 1},
    {"_tiledb_libtiledb_ctx_config", (DL_FUNC) &_tiledb_libtiledb_ctx_config, 1},
    {"_tiledb_libtiledb_ctx_is_supported_fs", (DL_FUNC) &_tiledb_libtiledb_ctx_is_supported_fs, 2},
    {"_tiledb_libtiledb_ctx_set_tag", (DL_FUNC) &_tiledb_libtiledb_ctx_set_tag, 3},
    {"_tiledb_libtiledb_config", (DL_FUNC) &_tiledb_libtiledb_config, 1},
    {"_tiledb_libtiledb_config_save_to_file", (DL_FUNC) &_tiledb_libtiledb_config_save_to_file, 2},
    {"_tiledb_libtiledb_config_load_from_file", (DL_FUNC) &_tiledb_libtiledb_config_load_from_file, 1},
    {"_tiledb_libtiledb_config_vector", (DL_FUNC) &_tiledb_libtiledb_config_vector, 1},
    {"_tiledb_libtiledb_config_set", (DL_FUNC) &_tiledb_libtiledb_config_set, 3},
    {"_tiledb_libtiledb_config_get", (DL_FUNC) &_tiledb_libtiledb_config_get, 2},
    {"_tiledb_libtiledb_config_unset", (DL_FUNC) &_tiledb_libtiledb_config_unset, 2},
    {"_tiledb_libtiledb_config_dump", (DL_FUNC) &_tiledb_libtiledb_config_dump, 1},
    {"_tiledb_libtiledb_dim", (DL_FUNC) &_tiledb_libtiledb_dim, 5},
    {"_tiledb_libtiledb_dim_get_name", (DL_FUNC) &_tiledb_libtiledb_dim_get_name, 1},
    {"_tiledb_libtiledb_dim_get_domain", (DL_FUNC) &_tiledb_libtiledb_dim_get_domain, 1},
    {"_tiledb_libtiledb_dim_get_tile_extent", (DL_FUNC) &_tiledb_libtiledb_dim_get_tile_extent, 1},
    {"_tiledb_libtiledb_dim_get_datatype", (DL_FUNC) &_tiledb_libtiledb_dim_get_datatype, 1},
    {"_tiledb_dim_domain_subarray", (DL_FUNC) &_tiledb_dim_domain_subarray, 2},
    {"_tiledb_libtiledb_dim_get_cell_val_num", (DL_FUNC) &_tiledb_libtiledb_dim_get_cell_val_num, 1},
    {"_tiledb_libtiledb_domain", (DL_FUNC) &_tiledb_libtiledb_domain, 2},
    {"_tiledb_libtiledb_domain_get_type", (DL_FUNC) &_tiledb_libtiledb_domain_get_type, 1},
    {"_tiledb_libtiledb_domain_get_ndim", (DL_FUNC) &_tiledb_libtiledb_domain_get_ndim, 1},
    {"_tiledb_libtiledb_domain_get_dimensions", (DL_FUNC) &_tiledb_libtiledb_domain_get_dimensions, 1},
    {"_tiledb_libtiledb_domain_dump", (DL_FUNC) &_tiledb_libtiledb_domain_dump, 1},
    {"_tiledb_libtiledb_filter", (DL_FUNC) &_tiledb_libtiledb_filter, 2},
    {"_tiledb_libtiledb_filter_get_type", (DL_FUNC) &_tiledb_libtiledb_filter_get_type, 1},
    {"_tiledb_libtiledb_filter_get_option", (DL_FUNC) &_tiledb_libtiledb_filter_get_option, 2},
    {"_tiledb_libtiledb_filter_set_option", (DL_FUNC) &_tiledb_libtiledb_filter_set_option, 3},
    {"_tiledb_libtiledb_filter_list", (DL_FUNC) &_tiledb_libtiledb_filter_list, 2},
    {"_tiledb_libtiledb_filter_list_set_max_chunk_size", (DL_FUNC) &_tiledb_libtiledb_filter_list_set_max_chunk_size, 2},
    {"_tiledb_libtiledb_filter_list_get_max_chunk_size", (DL_FUNC) &_tiledb_libtiledb_filter_list_get_max_chunk_size, 1},
    {"_tiledb_libtiledb_filter_list_get_nfilters", (DL_FUNC) &_tiledb_libtiledb_filter_list_get_nfilters, 1},
    {"_tiledb_libtiledb_filter_list_get_filter_from_index", (DL_FUNC) &_tiledb_libtiledb_filter_list_get_filter_from_index, 2},
    {"_tiledb_libtiledb_attribute", (DL_FUNC) &_tiledb_libtiledb_attribute, 5},
    {"_tiledb_libtiledb_attribute_get_name", (DL_FUNC) &_tiledb_libtiledb_attribute_get_name, 1},
    {"_tiledb_libtiledb_attribute_get_type", (DL_FUNC) &_tiledb_libtiledb_attribute_get_type, 1},
    {"_tiledb_libtiledb_attribute_get_cell_size", (DL_FUNC) &_tiledb_libtiledb_attribute_get_cell_size, 1},
    {"_tiledb_libtiledb_attribute_get_filter_list", (DL_FUNC) &_tiledb_libtiledb_attribute_get_filter_list, 1},
    {"_tiledb_libtiledb_attribute_get_cell_val_num", (DL_FUNC) &_tiledb_libtiledb_attribute_get_cell_val_num, 1},
    {"_tiledb_libtiledb_attribute_set_cell_val_num", (DL_FUNC) &_tiledb_libtiledb_attribute_set_cell_val_num, 2},
    {"_tiledb_libtiledb_attribute_is_variable_sized", (DL_FUNC) &_tiledb_libtiledb_attribute_is_variable_sized, 1},
    {"_tiledb_libtiledb_attribute_dump", (DL_FUNC) &_tiledb_libtiledb_attribute_dump, 1},
    {"_tiledb_libtiledb_attribute_set_fill_value", (DL_FUNC) &_tiledb_libtiledb_attribute_set_fill_value, 2},
    {"_tiledb_libtiledb_attribute_get_fill_value", (DL_FUNC) &_tiledb_libtiledb_attribute_get_fill_value, 1},
    {"_tiledb_libtiledb_array_schema", (DL_FUNC) &_tiledb_libtiledb_array_schema, 8},
    {"_tiledb_libtiledb_array_schema_create", (DL_FUNC) &_tiledb_libtiledb_array_schema_create, 2},
    {"_tiledb_libtiledb_array_schema_load", (DL_FUNC) &_tiledb_libtiledb_array_schema_load, 2},
    {"_tiledb_libtiledb_array_schema_load_with_key", (DL_FUNC) &_tiledb_libtiledb_array_schema_load_with_key, 3},
    {"_tiledb_libtiledb_array_schema_set_domain", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_domain, 2},
    {"_tiledb_libtiledb_array_schema_get_domain", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_domain, 1},
    {"_tiledb_libtiledb_array_schema_add_attribute", (DL_FUNC) &_tiledb_libtiledb_array_schema_add_attribute, 2},
    {"_tiledb_libtiledb_array_schema_attributes", (DL_FUNC) &_tiledb_libtiledb_array_schema_attributes, 1},
    {"_tiledb_libtiledb_array_schema_get_array_type", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_array_type, 1},
    {"_tiledb_libtiledb_array_schema_set_cell_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_cell_order, 2},
    {"_tiledb_libtiledb_array_schema_get_cell_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_cell_order, 1},
    {"_tiledb_libtiledb_array_schema_set_tile_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_tile_order, 2},
    {"_tiledb_libtiledb_array_schema_get_tile_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_tile_order, 1},
    {"_tiledb_libtiledb_array_schema_set_capacity", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_capacity, 2},
    {"_tiledb_libtiledb_array_schema_get_capacity", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_capacity, 1},
    {"_tiledb_libtiledb_array_schema_get_allows_dups", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_allows_dups, 1},
    {"_tiledb_libtiledb_array_schema_set_allows_dups", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_allows_dups, 2},
    {"_tiledb_libtiledb_array_schema_get_coords_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_coords_filter_list, 1},
    {"_tiledb_libtiledb_array_schema_offsets_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_offsets_filter_list, 1},
    {"_tiledb_libtiledb_array_schema_get_attribute_num", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_attribute_num, 1},
    {"_tiledb_libtiledb_array_schema_get_attribute_from_index", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_attribute_from_index, 2},
    {"_tiledb_libtiledb_array_schema_get_attribute_from_name", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_attribute_from_name, 2},
    {"_tiledb_libtiledb_array_schema_has_attribute", (DL_FUNC) &_tiledb_libtiledb_array_schema_has_attribute, 2},
    {"_tiledb_libtiledb_array_schema_sparse", (DL_FUNC) &_tiledb_libtiledb_array_schema_sparse, 1},
    {"_tiledb_libtiledb_array_schema_dump", (DL_FUNC) &_tiledb_libtiledb_array_schema_dump, 1},
    {"_tiledb_libtiledb_array_schema_check", (DL_FUNC) &_tiledb_libtiledb_array_schema_check, 1},
    {"_tiledb_libtiledb_array_create", (DL_FUNC) &_tiledb_libtiledb_array_create, 2},
    {"_tiledb_libtiledb_array_create_with_key", (DL_FUNC) &_tiledb_libtiledb_array_create_with_key, 3},
    {"_tiledb_libtiledb_array_open", (DL_FUNC) &_tiledb_libtiledb_array_open, 3},
    {"_tiledb_libtiledb_array_open_at", (DL_FUNC) &_tiledb_libtiledb_array_open_at, 4},
    {"_tiledb_libtiledb_array_open_with_key", (DL_FUNC) &_tiledb_libtiledb_array_open_with_key, 4},
    {"_tiledb_libtiledb_array_open_at_with_key", (DL_FUNC) &_tiledb_libtiledb_array_open_at_with_key, 5},
    {"_tiledb_libtiledb_array_open_with_ptr", (DL_FUNC) &_tiledb_libtiledb_array_open_with_ptr, 2},
    {"_tiledb_libtiledb_array_is_open", (DL_FUNC) &_tiledb_libtiledb_array_is_open, 1},
    {"_tiledb_libtiledb_array_is_open_for_reading", (DL_FUNC) &_tiledb_libtiledb_array_is_open_for_reading, 1},
    {"_tiledb_libtiledb_array_is_open_for_writing", (DL_FUNC) &_tiledb_libtiledb_array_is_open_for_writing, 1},
    {"_tiledb_libtiledb_array_get_uri", (DL_FUNC) &_tiledb_libtiledb_array_get_uri, 1},
    {"_tiledb_libtiledb_array_get_schema", (DL_FUNC) &_tiledb_libtiledb_array_get_schema, 1},
    {"_tiledb_libtiledb_array_reopen", (DL_FUNC) &_tiledb_libtiledb_array_reopen, 1},
    {"_tiledb_libtiledb_array_close", (DL_FUNC) &_tiledb_libtiledb_array_close, 1},
    {"_tiledb_libtiledb_array_query_type", (DL_FUNC) &_tiledb_libtiledb_array_query_type, 1},
    {"_tiledb_libtiledb_array_get_non_empty_domain", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain, 1},
    {"_tiledb_libtiledb_array_get_non_empty_domain_var_from_name", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain_var_from_name, 2},
    {"_tiledb_libtiledb_array_get_non_empty_domain_var_from_index", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain_var_from_index, 3},
    {"_tiledb_libtiledb_array_get_non_empty_domain_from_name", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain_from_name, 3},
    {"_tiledb_libtiledb_array_non_empty_domain_from_index", (DL_FUNC) &_tiledb_libtiledb_array_non_empty_domain_from_index, 3},
    {"_tiledb_libtiledb_array_consolidate", (DL_FUNC) &_tiledb_libtiledb_array_consolidate, 3},
    {"_tiledb_libtiledb_array_put_metadata", (DL_FUNC) &_tiledb_libtiledb_array_put_metadata, 3},
    {"_tiledb_libtiledb_array_get_metadata_num", (DL_FUNC) &_tiledb_libtiledb_array_get_metadata_num, 1},
    {"_tiledb_libtiledb_array_get_metadata_from_index", (DL_FUNC) &_tiledb_libtiledb_array_get_metadata_from_index, 2},
    {"_tiledb_libtiledb_array_get_metadata_list", (DL_FUNC) &_tiledb_libtiledb_array_get_metadata_list, 1},
    {"_tiledb_libtiledb_array_delete_metadata", (DL_FUNC) &_tiledb_libtiledb_array_delete_metadata, 2},
    {"_tiledb_libtiledb_query", (DL_FUNC) &_tiledb_libtiledb_query, 3},
    {"_tiledb_libtiledb_query_type", (DL_FUNC) &_tiledb_libtiledb_query_type, 1},
    {"_tiledb_libtiledb_query_set_layout", (DL_FUNC) &_tiledb_libtiledb_query_set_layout, 2},
    {"_tiledb_libtiledb_query_set_subarray_with_type", (DL_FUNC) &_tiledb_libtiledb_query_set_subarray_with_type, 3},
    {"_tiledb_libtiledb_query_set_subarray", (DL_FUNC) &_tiledb_libtiledb_query_set_subarray, 2},
    {"_tiledb_libtiledb_query_set_buffer", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer, 3},
    {"_tiledb_libtiledb_query_buffer_var_char_alloc_direct", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_char_alloc_direct, 2},
    {"_tiledb_libtiledb_query_buffer_var_char_create", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_char_create, 2},
    {"_tiledb_libtiledb_query_set_buffer_var_char", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer_var_char, 3},
    {"_tiledb_libtiledb_query_get_buffer_var_char", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_var_char, 3},
    {"_tiledb_libtiledb_query_get_buffer_var_char_simple", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_var_char_simple, 1},
    {"_tiledb_libtiledb_query_buffer_var_vec_create", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_vec_create, 2},
    {"_tiledb_libtiledb_query_set_buffer_var_vec", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer_var_vec, 3},
    {"_tiledb_libtiledb_query_get_buffer_var_vec", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_var_vec, 3},
    {"_tiledb_libtiledb_query_buffer_alloc_ptr", (DL_FUNC) &_tiledb_libtiledb_query_buffer_alloc_ptr, 3},
    {"_tiledb_libtiledb_query_buffer_assign_ptr", (DL_FUNC) &_tiledb_libtiledb_query_buffer_assign_ptr, 3},
    {"_tiledb_libtiledb_query_set_buffer_ptr", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer_ptr, 3},
    {"_tiledb_libtiledb_query_get_buffer_ptr", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_ptr, 1},
    {"_tiledb_libtiledb_query_submit", (DL_FUNC) &_tiledb_libtiledb_query_submit, 1},
    {"_tiledb_libtiledb_query_finalize", (DL_FUNC) &_tiledb_libtiledb_query_finalize, 1},
    {"_tiledb_libtiledb_query_status", (DL_FUNC) &_tiledb_libtiledb_query_status, 1},
    {"_tiledb_libtiledb_query_result_buffer_elements", (DL_FUNC) &_tiledb_libtiledb_query_result_buffer_elements, 2},
    {"_tiledb_libtiledb_query_get_fragment_num", (DL_FUNC) &_tiledb_libtiledb_query_get_fragment_num, 1},
    {"_tiledb_libtiledb_query_get_fragment_uri", (DL_FUNC) &_tiledb_libtiledb_query_get_fragment_uri, 2},
    {"_tiledb_libtiledb_query_add_range", (DL_FUNC) &_tiledb_libtiledb_query_add_range, 5},
    {"_tiledb_libtiledb_query_add_range_with_type", (DL_FUNC) &_tiledb_libtiledb_query_add_range_with_type, 6},
    {"_tiledb_libtiledb_query_get_est_result_size", (DL_FUNC) &_tiledb_libtiledb_query_get_est_result_size, 2},
    {"_tiledb_libtiledb_query_get_est_result_size_var", (DL_FUNC) &_tiledb_libtiledb_query_get_est_result_size_var, 2},
    {"_tiledb_libtiledb_zip_coords_numeric", (DL_FUNC) &_tiledb_libtiledb_zip_coords_numeric, 2},
    {"_tiledb_libtiledb_zip_coords_integer", (DL_FUNC) &_tiledb_libtiledb_zip_coords_integer, 2},
    {"_tiledb_libtiledb_group_create", (DL_FUNC) &_tiledb_libtiledb_group_create, 2},
    {"_tiledb_libtiledb_object_type", (DL_FUNC) &_tiledb_libtiledb_object_type, 2},
    {"_tiledb_libtiledb_object_remove", (DL_FUNC) &_tiledb_libtiledb_object_remove, 2},
    {"_tiledb_libtiledb_object_move", (DL_FUNC) &_tiledb_libtiledb_object_move, 3},
    {"_tiledb_libtiledb_object_walk", (DL_FUNC) &_tiledb_libtiledb_object_walk, 4},
    {"_tiledb_libtiledb_vfs", (DL_FUNC) &_tiledb_libtiledb_vfs, 2},
    {"_tiledb_libtiledb_vfs_create_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_create_bucket, 2},
    {"_tiledb_libtiledb_vfs_remove_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_remove_bucket, 2},
    {"_tiledb_libtiledb_vfs_is_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_is_bucket, 2},
    {"_tiledb_libtiledb_vfs_is_empty_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_is_empty_bucket, 2},
    {"_tiledb_libtiledb_vfs_empty_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_empty_bucket, 2},
    {"_tiledb_libtiledb_vfs_create_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_create_dir, 2},
    {"_tiledb_libtiledb_vfs_is_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_is_dir, 2},
    {"_tiledb_libtiledb_vfs_remove_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_remove_dir, 2},
    {"_tiledb_libtiledb_vfs_is_file", (DL_FUNC) &_tiledb_libtiledb_vfs_is_file, 2},
    {"_tiledb_libtiledb_vfs_remove_file", (DL_FUNC) &_tiledb_libtiledb_vfs_remove_file, 2},
    {"_tiledb_libtiledb_vfs_file_size", (DL_FUNC) &_tiledb_libtiledb_vfs_file_size, 2},
    {"_tiledb_libtiledb_vfs_move_file", (DL_FUNC) &_tiledb_libtiledb_vfs_move_file, 3},
    {"_tiledb_libtiledb_vfs_move_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_move_dir, 3},
    {"_tiledb_libtiledb_vfs_touch", (DL_FUNC) &_tiledb_libtiledb_vfs_touch, 2},
    {"_tiledb_libtiledb_stats_enable", (DL_FUNC) &_tiledb_libtiledb_stats_enable, 0},
    {"_tiledb_libtiledb_stats_disable", (DL_FUNC) &_tiledb_libtiledb_stats_disable, 0},
    {"_tiledb_libtiledb_stats_dump", (DL_FUNC) &_tiledb_libtiledb_stats_dump, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tiledb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
