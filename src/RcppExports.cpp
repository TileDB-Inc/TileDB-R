// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tiledb.h"
#include "../inst/include/tiledb_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// libtiledb_query_export_buffer
nanoarrowS3 libtiledb_query_export_buffer(XPtr<tiledb::Context> ctx, XPtr<tiledb::Query> query, std::string& name);
RcppExport SEXP _tiledb_libtiledb_query_export_buffer(SEXP ctxSEXP, SEXP querySEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_export_buffer(ctx, query, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_import_buffer
XPtr<tiledb::Query> libtiledb_query_import_buffer(XPtr<tiledb::Context> ctx, XPtr<tiledb::Query> query, std::string& name, nanoarrowS3 naptr);
RcppExport SEXP _tiledb_libtiledb_query_import_buffer(SEXP ctxSEXP, SEXP querySEXP, SEXP nameSEXP, SEXP naptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< nanoarrowS3 >::type naptr(naptrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_import_buffer(ctx, query, name, naptr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_export_arrow_table
nanoarrowS3 libtiledb_query_export_arrow_table(XPtr<tiledb::Context> ctx, XPtr<tiledb::Query> query, std::vector<std::string> names);
RcppExport SEXP _tiledb_libtiledb_query_export_arrow_table(SEXP ctxSEXP, SEXP querySEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_export_arrow_table(ctx, query, names));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_to_arrow
nanoarrowS3 libtiledb_to_arrow(Rcpp::XPtr<tiledb::ArrayBuffers> ab, Rcpp::XPtr<tiledb::Query> qry, Rcpp::List dicts);
RcppExport SEXP _tiledb_libtiledb_to_arrow(SEXP abSEXP, SEXP qrySEXP, SEXP dictsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<tiledb::ArrayBuffers> >::type ab(abSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<tiledb::Query> >::type qry(qrySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dicts(dictsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_to_arrow(ab, qry, dicts));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_allocate_column_buffers
Rcpp::XPtr<tiledb::ArrayBuffers> libtiledb_allocate_column_buffers(Rcpp::XPtr<tiledb::Context> ctx, Rcpp::XPtr<tiledb::Query> qry, std::string uri, std::vector<std::string> names, const size_t memory_budget);
RcppExport SEXP _tiledb_libtiledb_allocate_column_buffers(SEXP ctxSEXP, SEXP qrySEXP, SEXP uriSEXP, SEXP namesSEXP, SEXP memory_budgetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<tiledb::Query> >::type qry(qrySEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< const size_t >::type memory_budget(memory_budgetSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_allocate_column_buffers(ctx, qry, uri, names, memory_budget));
    return rcpp_result_gen;
END_RCPP
}
// nanoarrow2list
Rcpp::List nanoarrow2list(nanoarrowS3 naarrptr);
RcppExport SEXP _tiledb_nanoarrow2list(SEXP naarrptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< nanoarrowS3 >::type naarrptr(naarrptrSEXP);
    rcpp_result_gen = Rcpp::wrap(nanoarrow2list(naarrptr));
    return rcpp_result_gen;
END_RCPP
}
// makeQueryWrapper
SEXP makeQueryWrapper(SEXP qp);
RcppExport SEXP _tiledb_makeQueryWrapper(SEXP qpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type qp(qpSEXP);
    rcpp_result_gen = Rcpp::wrap(makeQueryWrapper(qp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_submit_async
XPtr<tiledb::Query> libtiledb_query_submit_async(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_submit_async(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_submit_async(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_create_with_key
std::string libtiledb_array_create_with_key(std::string uri, XPtr<tiledb::ArraySchema> schema, std::string encryption_key);
RcppExport SEXP _tiledb_libtiledb_array_create_with_key(SEXP uriSEXP, SEXP schemaSEXP, SEXP encryption_keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type encryption_key(encryption_keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_create_with_key(uri, schema, encryption_key));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_datatype_string_to_sizeof
int32_t tiledb_datatype_string_to_sizeof(const std::string str);
RcppExport SEXP _tiledb_tiledb_datatype_string_to_sizeof(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_datatype_string_to_sizeof(str));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_datatype_R_type
std::string tiledb_datatype_R_type(std::string datatype);
RcppExport SEXP _tiledb_tiledb_datatype_R_type(SEXP datatypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type datatype(datatypeSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_datatype_R_type(datatype));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_version
NumericVector libtiledb_version();
RcppExport SEXP _tiledb_libtiledb_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libtiledb_version());
    return rcpp_result_gen;
END_RCPP
}
// tiledb_datatype_max_value
size_t tiledb_datatype_max_value(const std::string& datatype);
RcppExport SEXP _tiledb_tiledb_datatype_max_value(SEXP datatypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type datatype(datatypeSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_datatype_max_value(datatype));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx
XPtr<tiledb::Context> libtiledb_ctx(Nullable<XPtr<tiledb::Config>> config);
RcppExport SEXP _tiledb_libtiledb_ctx(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_ctx(config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx_config
XPtr<tiledb::Config> libtiledb_ctx_config(XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_ctx_config(SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_ctx_config(ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx_is_supported_fs
bool libtiledb_ctx_is_supported_fs(XPtr<tiledb::Context> ctx, std::string scheme);
RcppExport SEXP _tiledb_libtiledb_ctx_is_supported_fs(SEXP ctxSEXP, SEXP schemeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type scheme(schemeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_ctx_is_supported_fs(ctx, scheme));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_ctx_set_tag
void libtiledb_ctx_set_tag(XPtr<tiledb::Context> ctx, std::string key, std::string value);
RcppExport SEXP _tiledb_libtiledb_ctx_set_tag(SEXP ctxSEXP, SEXP keySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    libtiledb_ctx_set_tag(ctx, key, value);
    return R_NilValue;
END_RCPP
}
// libtiledb_ctx_stats
std::string libtiledb_ctx_stats(XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_ctx_stats(SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_ctx_stats(ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config
XPtr<tiledb::Config> libtiledb_config(Nullable<CharacterVector> config);
RcppExport SEXP _tiledb_libtiledb_config(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config(config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_save_to_file
std::string libtiledb_config_save_to_file(XPtr<tiledb::Config> config, std::string filename);
RcppExport SEXP _tiledb_libtiledb_config_save_to_file(SEXP configSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_save_to_file(config, filename));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_load_from_file
XPtr<tiledb::Config> libtiledb_config_load_from_file(std::string filename);
RcppExport SEXP _tiledb_libtiledb_config_load_from_file(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_load_from_file(filename));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_vector
CharacterVector libtiledb_config_vector(XPtr<tiledb::Config> config);
RcppExport SEXP _tiledb_libtiledb_config_vector(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_vector(config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_set
XPtr<tiledb::Config> libtiledb_config_set(XPtr<tiledb::Config> config, std::string param, std::string value);
RcppExport SEXP _tiledb_libtiledb_config_set(SEXP configSEXP, SEXP paramSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type param(paramSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_set(config, param, value));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_get
CharacterVector libtiledb_config_get(XPtr<tiledb::Config> config, CharacterVector params);
RcppExport SEXP _tiledb_libtiledb_config_get(SEXP configSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_get(config, params));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_unset
XPtr<tiledb::Config> libtiledb_config_unset(XPtr<tiledb::Config> config, std::string param);
RcppExport SEXP _tiledb_libtiledb_config_unset(SEXP configSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_config_unset(config, param));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_config_dump
void libtiledb_config_dump(XPtr<tiledb::Config> config);
RcppExport SEXP _tiledb_libtiledb_config_dump(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    libtiledb_config_dump(config);
    return R_NilValue;
END_RCPP
}
// libtiledb_as_built_dump
std::string libtiledb_as_built_dump();
RcppExport SEXP _tiledb_libtiledb_as_built_dump() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libtiledb_as_built_dump());
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim
XPtr<tiledb::Dimension> libtiledb_dim(XPtr<tiledb::Context> ctx, std::string name, std::string type, SEXP domain, SEXP tile_extent);
RcppExport SEXP _tiledb_libtiledb_dim(SEXP ctxSEXP, SEXP nameSEXP, SEXP typeSEXP, SEXP domainSEXP, SEXP tile_extentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tile_extent(tile_extentSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim(ctx, name, type, domain, tile_extent));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_name
std::string libtiledb_dim_get_name(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_name(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_name(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_domain
SEXP libtiledb_dim_get_domain(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_domain(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_domain(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_tile_extent
SEXP libtiledb_dim_get_tile_extent(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_tile_extent(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_tile_extent(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_datatype
std::string libtiledb_dim_get_datatype(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_datatype(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_datatype(dim));
    return rcpp_result_gen;
END_RCPP
}
// dim_domain_subarray
NumericVector dim_domain_subarray(NumericVector domain, NumericVector subscript);
RcppExport SEXP _tiledb_dim_domain_subarray(SEXP domainSEXP, SEXP subscriptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subscript(subscriptSEXP);
    rcpp_result_gen = Rcpp::wrap(dim_domain_subarray(domain, subscript));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dim_get_cell_val_num
int libtiledb_dim_get_cell_val_num(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dim_get_cell_val_num(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dim_get_cell_val_num(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dimension_get_filter_list
XPtr<tiledb::FilterList> libtiledb_dimension_get_filter_list(XPtr<tiledb::Dimension> dim);
RcppExport SEXP _tiledb_libtiledb_dimension_get_filter_list(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dimension_get_filter_list(dim));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_dimension_set_filter_list
XPtr<tiledb::Dimension> libtiledb_dimension_set_filter_list(XPtr<tiledb::Dimension> dim, XPtr<tiledb::FilterList> fltrlst);
RcppExport SEXP _tiledb_libtiledb_dimension_set_filter_list(SEXP dimSEXP, SEXP fltrlstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Dimension> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type fltrlst(fltrlstSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_dimension_set_filter_list(dim, fltrlst));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain
XPtr<tiledb::Domain> libtiledb_domain(XPtr<tiledb::Context> ctx, List dims);
RcppExport SEXP _tiledb_libtiledb_domain(SEXP ctxSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< List >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain(ctx, dims));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_type
std::string libtiledb_domain_get_type(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_get_type(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_type(domain));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_ndim
int libtiledb_domain_get_ndim(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_get_ndim(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_ndim(domain));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_dimension_from_index
XPtr<tiledb::Dimension> libtiledb_domain_get_dimension_from_index(XPtr<tiledb::Domain> dom, int idx);
RcppExport SEXP _tiledb_libtiledb_domain_get_dimension_from_index(SEXP domSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type dom(domSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_dimension_from_index(dom, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_dimension_from_name
XPtr<tiledb::Dimension> libtiledb_domain_get_dimension_from_name(XPtr<tiledb::Domain> dom, std::string name);
RcppExport SEXP _tiledb_libtiledb_domain_get_dimension_from_name(SEXP domSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type dom(domSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_dimension_from_name(dom, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_get_dimensions
List libtiledb_domain_get_dimensions(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_get_dimensions(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_get_dimensions(domain));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_has_dimension
bool libtiledb_domain_has_dimension(XPtr<tiledb::Domain> domain, std::string name);
RcppExport SEXP _tiledb_libtiledb_domain_has_dimension(SEXP domainSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_domain_has_dimension(domain, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_domain_dump
void libtiledb_domain_dump(XPtr<tiledb::Domain> domain);
RcppExport SEXP _tiledb_libtiledb_domain_dump(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    libtiledb_domain_dump(domain);
    return R_NilValue;
END_RCPP
}
// libtiledb_filter
XPtr<tiledb::Filter> libtiledb_filter(XPtr<tiledb::Context> ctx, std::string filter);
RcppExport SEXP _tiledb_libtiledb_filter(SEXP ctxSEXP, SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter(ctx, filter));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_get_type
std::string libtiledb_filter_get_type(XPtr<tiledb::Filter> filter);
RcppExport SEXP _tiledb_libtiledb_filter_get_type(SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Filter> >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_get_type(filter));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_get_option
R_xlen_t libtiledb_filter_get_option(XPtr<tiledb::Filter> filter, std::string filter_option_str);
RcppExport SEXP _tiledb_libtiledb_filter_get_option(SEXP filterSEXP, SEXP filter_option_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Filter> >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_option_str(filter_option_strSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_get_option(filter, filter_option_str));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_set_option
XPtr<tiledb::Filter> libtiledb_filter_set_option(XPtr<tiledb::Filter> filter, std::string filter_option_str, SEXP valuesxp);
RcppExport SEXP _tiledb_libtiledb_filter_set_option(SEXP filterSEXP, SEXP filter_option_strSEXP, SEXP valuesxpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Filter> >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_option_str(filter_option_strSEXP);
    Rcpp::traits::input_parameter< SEXP >::type valuesxp(valuesxpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_set_option(filter, filter_option_str, valuesxp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_list
XPtr<tiledb::FilterList> libtiledb_filter_list(XPtr<tiledb::Context> ctx, List filters);
RcppExport SEXP _tiledb_libtiledb_filter_list(SEXP ctxSEXP, SEXP filtersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< List >::type filters(filtersSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list(ctx, filters));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_list_set_max_chunk_size
void libtiledb_filter_list_set_max_chunk_size(XPtr<tiledb::FilterList> filterList, uint32_t max_chunk_size);
RcppExport SEXP _tiledb_libtiledb_filter_list_set_max_chunk_size(SEXP filterListSEXP, SEXP max_chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_chunk_size(max_chunk_sizeSEXP);
    libtiledb_filter_list_set_max_chunk_size(filterList, max_chunk_size);
    return R_NilValue;
END_RCPP
}
// libtiledb_filter_list_get_max_chunk_size
int libtiledb_filter_list_get_max_chunk_size(XPtr<tiledb::FilterList> filterList);
RcppExport SEXP _tiledb_libtiledb_filter_list_get_max_chunk_size(SEXP filterListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list_get_max_chunk_size(filterList));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_list_get_nfilters
int libtiledb_filter_list_get_nfilters(XPtr<tiledb::FilterList> filterList);
RcppExport SEXP _tiledb_libtiledb_filter_list_get_nfilters(SEXP filterListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list_get_nfilters(filterList));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filter_list_get_filter_from_index
XPtr<tiledb::Filter> libtiledb_filter_list_get_filter_from_index(XPtr<tiledb::FilterList> filterList, uint32_t filter_index);
RcppExport SEXP _tiledb_libtiledb_filter_list_get_filter_from_index(SEXP filterListSEXP, SEXP filter_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type filterList(filterListSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type filter_index(filter_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filter_list_get_filter_from_index(filterList, filter_index));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute
XPtr<tiledb::Attribute> libtiledb_attribute(XPtr<tiledb::Context> ctx, std::string name, std::string type, XPtr<tiledb::FilterList> fltrlst, int ncells, bool nullable);
RcppExport SEXP _tiledb_libtiledb_attribute(SEXP ctxSEXP, SEXP nameSEXP, SEXP typeSEXP, SEXP fltrlstSEXP, SEXP ncellsSEXP, SEXP nullableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type fltrlst(fltrlstSEXP);
    Rcpp::traits::input_parameter< int >::type ncells(ncellsSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute(ctx, name, type, fltrlst, ncells, nullable));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_name
std::string libtiledb_attribute_get_name(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_name(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_name(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_type
std::string libtiledb_attribute_get_type(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_type(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_type(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_cell_size
double libtiledb_attribute_get_cell_size(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_cell_size(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_cell_size(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_filter_list
XPtr<tiledb::FilterList> libtiledb_attribute_get_filter_list(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_filter_list(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_filter_list(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_set_filter_list
XPtr<tiledb::Attribute> libtiledb_attribute_set_filter_list(XPtr<tiledb::Attribute> attr, XPtr<tiledb::FilterList> fltrlst);
RcppExport SEXP _tiledb_libtiledb_attribute_set_filter_list(SEXP attrSEXP, SEXP fltrlstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type fltrlst(fltrlstSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_set_filter_list(attr, fltrlst));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_cell_val_num
int libtiledb_attribute_get_cell_val_num(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_cell_val_num(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_cell_val_num(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_set_cell_val_num
void libtiledb_attribute_set_cell_val_num(XPtr<tiledb::Attribute> attr, int num);
RcppExport SEXP _tiledb_libtiledb_attribute_set_cell_val_num(SEXP attrSEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    libtiledb_attribute_set_cell_val_num(attr, num);
    return R_NilValue;
END_RCPP
}
// libtiledb_attribute_is_variable_sized
bool libtiledb_attribute_is_variable_sized(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_is_variable_sized(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_is_variable_sized(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_dump
void libtiledb_attribute_dump(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_dump(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    libtiledb_attribute_dump(attr);
    return R_NilValue;
END_RCPP
}
// libtiledb_attribute_set_fill_value
void libtiledb_attribute_set_fill_value(XPtr<tiledb::Attribute> attr, SEXP val);
RcppExport SEXP _tiledb_libtiledb_attribute_set_fill_value(SEXP attrSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type val(valSEXP);
    libtiledb_attribute_set_fill_value(attr, val);
    return R_NilValue;
END_RCPP
}
// libtiledb_attribute_get_fill_value
SEXP libtiledb_attribute_get_fill_value(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_fill_value(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_fill_value(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_set_nullable
void libtiledb_attribute_set_nullable(XPtr<tiledb::Attribute> attr, const bool flag);
RcppExport SEXP _tiledb_libtiledb_attribute_set_nullable(SEXP attrSEXP, SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< const bool >::type flag(flagSEXP);
    libtiledb_attribute_set_nullable(attr, flag);
    return R_NilValue;
END_RCPP
}
// libtiledb_attribute_get_nullable
bool libtiledb_attribute_get_nullable(XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_nullable(SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_nullable(attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_has_enumeration
bool libtiledb_attribute_has_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_attribute_has_enumeration(SEXP ctxSEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_has_enumeration(ctx, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_enumeration_type
Rcpp::String libtiledb_attribute_get_enumeration_type(XPtr<tiledb::Context> ctx, XPtr<tiledb::Attribute> attr, XPtr<tiledb::Array> arr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_enumeration_type(SEXP ctxSEXP, SEXP attrSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_enumeration_type(ctx, attr, arr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_enumeration_vector
SEXP libtiledb_attribute_get_enumeration_vector(XPtr<tiledb::Context> ctx, XPtr<tiledb::Attribute> attr, XPtr<tiledb::Array> arr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_enumeration_vector(SEXP ctxSEXP, SEXP attrSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_enumeration_vector(ctx, attr, arr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_get_enumeration
std::vector<std::string> libtiledb_attribute_get_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::Attribute> attr, XPtr<tiledb::Array> arr);
RcppExport SEXP _tiledb_libtiledb_attribute_get_enumeration(SEXP ctxSEXP, SEXP attrSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_get_enumeration(ctx, attr, arr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_set_enumeration
XPtr<tiledb::Attribute> libtiledb_attribute_set_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::Attribute> attr, const std::string& enum_name);
RcppExport SEXP _tiledb_libtiledb_attribute_set_enumeration(SEXP ctxSEXP, SEXP attrSEXP, SEXP enum_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type enum_name(enum_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_set_enumeration(ctx, attr, enum_name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_attribute_is_ordered_enumeration
bool libtiledb_attribute_is_ordered_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::Attribute> attr, XPtr<tiledb::Array> arr);
RcppExport SEXP _tiledb_libtiledb_attribute_is_ordered_enumeration(SEXP ctxSEXP, SEXP attrSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_attribute_is_ordered_enumeration(ctx, attr, arr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema
XPtr<tiledb::ArraySchema> libtiledb_array_schema(XPtr<tiledb::Context> ctx, XPtr<tiledb::Domain> domain, List attributes, std::string cell_order, std::string tile_order, Nullable<XPtr<tiledb::FilterList>> coords_filter_list, Nullable<XPtr<tiledb::FilterList>> offsets_filter_list, Nullable<XPtr<tiledb::FilterList>> validity_filter_list, bool sparse, Nullable<List> enumerations_list);
RcppExport SEXP _tiledb_libtiledb_array_schema(SEXP ctxSEXP, SEXP domainSEXP, SEXP attributesSEXP, SEXP cell_orderSEXP, SEXP tile_orderSEXP, SEXP coords_filter_listSEXP, SEXP offsets_filter_listSEXP, SEXP validity_filter_listSEXP, SEXP sparseSEXP, SEXP enumerations_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< List >::type attributes(attributesSEXP);
    Rcpp::traits::input_parameter< std::string >::type cell_order(cell_orderSEXP);
    Rcpp::traits::input_parameter< std::string >::type tile_order(tile_orderSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::FilterList>> >::type coords_filter_list(coords_filter_listSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::FilterList>> >::type offsets_filter_list(offsets_filter_listSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::FilterList>> >::type validity_filter_list(validity_filter_listSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type enumerations_list(enumerations_listSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema(ctx, domain, attributes, cell_order, tile_order, coords_filter_list, offsets_filter_list, validity_filter_list, sparse, enumerations_list));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_create
XPtr<tiledb::ArraySchema> libtiledb_array_schema_create(XPtr<tiledb::Context> ctx, std::string atstr);
RcppExport SEXP _tiledb_libtiledb_array_schema_create(SEXP ctxSEXP, SEXP atstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type atstr(atstrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_create(ctx, atstr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_load
XPtr<tiledb::ArraySchema> libtiledb_array_schema_load(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_array_schema_load(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_load(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_load_with_key
XPtr<tiledb::ArraySchema> libtiledb_array_schema_load_with_key(XPtr<tiledb::Context> ctx, std::string uri, std::string key);
RcppExport SEXP _tiledb_libtiledb_array_schema_load_with_key(SEXP ctxSEXP, SEXP uriSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_load_with_key(ctx, uri, key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_domain
void libtiledb_array_schema_set_domain(XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::Domain> dom);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_domain(SEXP schemaSEXP, SEXP domSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Domain> >::type dom(domSEXP);
    libtiledb_array_schema_set_domain(schema, dom);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_domain
XPtr<tiledb::Domain> libtiledb_array_schema_get_domain(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_domain(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_domain(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_add_attribute
void libtiledb_array_schema_add_attribute(XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_array_schema_add_attribute(SEXP schemaSEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    libtiledb_array_schema_add_attribute(schema, attr);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_attributes
List libtiledb_array_schema_attributes(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_attributes(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_attributes(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_array_type
std::string libtiledb_array_schema_get_array_type(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_array_type(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_array_type(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_cell_order
void libtiledb_array_schema_set_cell_order(XPtr<tiledb::ArraySchema> schema, std::string ord);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_cell_order(SEXP schemaSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ord(ordSEXP);
    libtiledb_array_schema_set_cell_order(schema, ord);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_cell_order
std::string libtiledb_array_schema_get_cell_order(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_cell_order(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_cell_order(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_tile_order
void libtiledb_array_schema_set_tile_order(XPtr<tiledb::ArraySchema> schema, std::string ord);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_tile_order(SEXP schemaSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ord(ordSEXP);
    libtiledb_array_schema_set_tile_order(schema, ord);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_tile_order
std::string libtiledb_array_schema_get_tile_order(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_tile_order(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_tile_order(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_capacity
void libtiledb_array_schema_set_capacity(XPtr<tiledb::ArraySchema> schema, int cap);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_capacity(SEXP schemaSEXP, SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< int >::type cap(capSEXP);
    libtiledb_array_schema_set_capacity(schema, cap);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_get_capacity
int libtiledb_array_schema_get_capacity(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_capacity(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_capacity(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_allows_dups
bool libtiledb_array_schema_get_allows_dups(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_allows_dups(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_allows_dups(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_allows_dups
XPtr<tiledb::ArraySchema> libtiledb_array_schema_set_allows_dups(XPtr<tiledb::ArraySchema> schema, bool allows_dups);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_allows_dups(SEXP schemaSEXP, SEXP allows_dupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< bool >::type allows_dups(allows_dupsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_set_allows_dups(schema, allows_dups));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_coords_filter_list
XPtr<tiledb::FilterList> libtiledb_array_schema_get_coords_filter_list(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_coords_filter_list(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_coords_filter_list(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_coords_filter_list
XPtr<tiledb::ArraySchema> libtiledb_array_schema_set_coords_filter_list(XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::FilterList> fltrlst);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_coords_filter_list(SEXP schemaSEXP, SEXP fltrlstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type fltrlst(fltrlstSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_set_coords_filter_list(schema, fltrlst));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_offsets_filter_list
XPtr<tiledb::FilterList> libtiledb_array_schema_get_offsets_filter_list(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_offsets_filter_list(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_offsets_filter_list(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_offsets_filter_list
XPtr<tiledb::ArraySchema> libtiledb_array_schema_set_offsets_filter_list(XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::FilterList> fltrlst);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_offsets_filter_list(SEXP schemaSEXP, SEXP fltrlstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type fltrlst(fltrlstSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_set_offsets_filter_list(schema, fltrlst));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_validity_filter_list
XPtr<tiledb::FilterList> libtiledb_array_schema_get_validity_filter_list(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_validity_filter_list(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_validity_filter_list(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_validity_filter_list
XPtr<tiledb::ArraySchema> libtiledb_array_schema_set_validity_filter_list(XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::FilterList> fltrlst);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_validity_filter_list(SEXP schemaSEXP, SEXP fltrlstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::FilterList> >::type fltrlst(fltrlstSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_set_validity_filter_list(schema, fltrlst));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_attribute_num
int libtiledb_array_schema_get_attribute_num(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_attribute_num(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_attribute_num(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_attribute_from_index
XPtr<tiledb::Attribute> libtiledb_array_schema_get_attribute_from_index(XPtr<tiledb::ArraySchema> schema, int ind);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_attribute_from_index(SEXP schemaSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_attribute_from_index(schema, ind));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_get_attribute_from_name
XPtr<tiledb::Attribute> libtiledb_array_schema_get_attribute_from_name(XPtr<tiledb::ArraySchema> schema, std::string name);
RcppExport SEXP _tiledb_libtiledb_array_schema_get_attribute_from_name(SEXP schemaSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_get_attribute_from_name(schema, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_has_attribute
bool libtiledb_array_schema_has_attribute(XPtr<tiledb::ArraySchema> schema, std::string name);
RcppExport SEXP _tiledb_libtiledb_array_schema_has_attribute(SEXP schemaSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_has_attribute(schema, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_sparse
bool libtiledb_array_schema_sparse(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_sparse(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_sparse(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_dump
void libtiledb_array_schema_dump(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_dump(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    libtiledb_array_schema_dump(schema);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_schema_check
bool libtiledb_array_schema_check(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_check(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_check(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_version
int libtiledb_array_schema_version(XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_schema_version(SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_version(schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_enumeration
XPtr<tiledb::ArraySchema> libtiledb_array_schema_set_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::Attribute> attr, const std::string enum_name, std::vector<std::string> values, bool nullable, bool ordered);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_enumeration(SEXP ctxSEXP, SEXP schemaSEXP, SEXP attrSEXP, SEXP enum_nameSEXP, SEXP valuesSEXP, SEXP nullableSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< const std::string >::type enum_name(enum_nameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_set_enumeration(ctx, schema, attr, enum_name, values, nullable, ordered));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_set_enumeration_empty
XPtr<tiledb::ArraySchema> libtiledb_array_schema_set_enumeration_empty(XPtr<tiledb::Context> ctx, XPtr<tiledb::ArraySchema> schema, XPtr<tiledb::Attribute> attr, const std::string enum_name, const std::string type_str, int cell_val_num, bool ordered);
RcppExport SEXP _tiledb_libtiledb_array_schema_set_enumeration_empty(SEXP ctxSEXP, SEXP schemaSEXP, SEXP attrSEXP, SEXP enum_nameSEXP, SEXP type_strSEXP, SEXP cell_val_numSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< const std::string >::type enum_name(enum_nameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type_str(type_strSEXP);
    Rcpp::traits::input_parameter< int >::type cell_val_num(cell_val_numSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_set_enumeration_empty(ctx, schema, attr, enum_name, type_str, cell_val_num, ordered));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution(XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution(SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution(ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution_add_attribute
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution_add_attribute(XPtr<tiledb::ArraySchemaEvolution> ase, XPtr<tiledb::Attribute> attr);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution_add_attribute(SEXP aseSEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchemaEvolution> >::type ase(aseSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Attribute> >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution_add_attribute(ase, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution_drop_attribute
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution_drop_attribute(XPtr<tiledb::ArraySchemaEvolution> ase, const std::string& attrname);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution_drop_attribute(SEXP aseSEXP, SEXP attrnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchemaEvolution> >::type ase(aseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type attrname(attrnameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution_drop_attribute(ase, attrname));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution_array_evolve
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution_array_evolve(XPtr<tiledb::ArraySchemaEvolution> ase, const std::string& uri);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution_array_evolve(SEXP aseSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchemaEvolution> >::type ase(aseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution_array_evolve(ase, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution_add_enumeration
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution_add_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::ArraySchemaEvolution> ase, const std::string& enum_name, std::vector<std::string> values, bool nullable, bool ordered);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution_add_enumeration(SEXP ctxSEXP, SEXP aseSEXP, SEXP enum_nameSEXP, SEXP valuesSEXP, SEXP nullableSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchemaEvolution> >::type ase(aseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type enum_name(enum_nameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution_add_enumeration(ctx, ase, enum_name, values, nullable, ordered));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution_add_enumeration_empty
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution_add_enumeration_empty(XPtr<tiledb::Context> ctx, XPtr<tiledb::ArraySchemaEvolution> ase, const std::string& enum_name, const std::string type_str, int cell_val_num, bool ordered);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution_add_enumeration_empty(SEXP ctxSEXP, SEXP aseSEXP, SEXP enum_nameSEXP, SEXP type_strSEXP, SEXP cell_val_numSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchemaEvolution> >::type ase(aseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type enum_name(enum_nameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type_str(type_strSEXP);
    Rcpp::traits::input_parameter< int >::type cell_val_num(cell_val_numSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution_add_enumeration_empty(ctx, ase, enum_name, type_str, cell_val_num, ordered));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution_drop_enumeration
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution_drop_enumeration(XPtr<tiledb::ArraySchemaEvolution> ase, const std::string& attrname);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution_drop_enumeration(SEXP aseSEXP, SEXP attrnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchemaEvolution> >::type ase(aseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type attrname(attrnameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution_drop_enumeration(ase, attrname));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_schema_evolution_extend_enumeration
XPtr<tiledb::ArraySchemaEvolution> libtiledb_array_schema_evolution_extend_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::ArraySchemaEvolution> ase, XPtr<tiledb::Array> array, const std::string& enum_name, std::vector<std::string> new_values, bool nullable, bool ordered);
RcppExport SEXP _tiledb_libtiledb_array_schema_evolution_extend_enumeration(SEXP ctxSEXP, SEXP aseSEXP, SEXP arraySEXP, SEXP enum_nameSEXP, SEXP new_valuesSEXP, SEXP nullableSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchemaEvolution> >::type ase(aseSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type enum_name(enum_nameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type new_values(new_valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_schema_evolution_extend_enumeration(ctx, ase, array, enum_name, new_values, nullable, ordered));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_create
std::string libtiledb_array_create(std::string uri, XPtr<tiledb::ArraySchema> schema);
RcppExport SEXP _tiledb_libtiledb_array_create(SEXP uriSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::ArraySchema> >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_create(uri, schema));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open
XPtr<tiledb::Array> libtiledb_array_open(XPtr<tiledb::Context> ctx, std::string uri, std::string type);
RcppExport SEXP _tiledb_libtiledb_array_open(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open(ctx, uri, type));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_at
XPtr<tiledb::Array> libtiledb_array_open_at(XPtr<tiledb::Context> ctx, std::string uri, std::string type, Datetime tstamp);
RcppExport SEXP _tiledb_libtiledb_array_open_at(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP, SEXP tstampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Datetime >::type tstamp(tstampSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_at(ctx, uri, type, tstamp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_with_key
XPtr<tiledb::Array> libtiledb_array_open_with_key(XPtr<tiledb::Context> ctx, std::string uri, std::string type, std::string enc_key);
RcppExport SEXP _tiledb_libtiledb_array_open_with_key(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP, SEXP enc_keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type enc_key(enc_keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_with_key(ctx, uri, type, enc_key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_at_with_key
XPtr<tiledb::Array> libtiledb_array_open_at_with_key(XPtr<tiledb::Context> ctx, std::string uri, std::string type, std::string enc_key, Datetime tstamp);
RcppExport SEXP _tiledb_libtiledb_array_open_at_with_key(SEXP ctxSEXP, SEXP uriSEXP, SEXP typeSEXP, SEXP enc_keySEXP, SEXP tstampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type enc_key(enc_keySEXP);
    Rcpp::traits::input_parameter< Datetime >::type tstamp(tstampSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_at_with_key(ctx, uri, type, enc_key, tstamp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_with_ptr
XPtr<tiledb::Array> libtiledb_array_open_with_ptr(XPtr<tiledb::Array> array, std::string query_type);
RcppExport SEXP _tiledb_libtiledb_array_open_with_ptr(SEXP arraySEXP, SEXP query_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type query_type(query_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_with_ptr(array, query_type));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_is_open
bool libtiledb_array_is_open(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_is_open(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_is_open(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_is_open_for_reading
bool libtiledb_array_is_open_for_reading(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_is_open_for_reading(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_is_open_for_reading(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_is_open_for_writing
bool libtiledb_array_is_open_for_writing(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_is_open_for_writing(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_is_open_for_writing(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_uri
std::string libtiledb_array_get_uri(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_uri(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_uri(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_schema
XPtr<tiledb::ArraySchema> libtiledb_array_get_schema(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_schema(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_schema(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_reopen
XPtr<tiledb::Array> libtiledb_array_reopen(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_reopen(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_reopen(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_close
XPtr<tiledb::Array> libtiledb_array_close(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_close(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_close(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_query_type
std::string libtiledb_array_query_type(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_query_type(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_query_type(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain
List libtiledb_array_get_non_empty_domain(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain_var_from_name
CharacterVector libtiledb_array_get_non_empty_domain_var_from_name(XPtr<tiledb::Array> array, std::string name);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain_var_from_name(SEXP arraySEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain_var_from_name(array, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain_var_from_index
CharacterVector libtiledb_array_get_non_empty_domain_var_from_index(XPtr<tiledb::Array> array, int32_t idx, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain_var_from_index(SEXP arraySEXP, SEXP idxSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int32_t >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain_var_from_index(array, idx, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain_from_name
NumericVector libtiledb_array_get_non_empty_domain_from_name(XPtr<tiledb::Array> array, std::string name, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain_from_name(SEXP arraySEXP, SEXP nameSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain_from_name(array, name, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_non_empty_domain_from_index
NumericVector libtiledb_array_get_non_empty_domain_from_index(XPtr<tiledb::Array> array, int32_t idx, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_array_get_non_empty_domain_from_index(SEXP arraySEXP, SEXP idxSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int32_t >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_non_empty_domain_from_index(array, idx, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_consolidate
void libtiledb_array_consolidate(XPtr<tiledb::Context> ctx, std::string uri, Nullable<XPtr<tiledb::Config>> cfgptr);
RcppExport SEXP _tiledb_libtiledb_array_consolidate(SEXP ctxSEXP, SEXP uriSEXP, SEXP cfgptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type cfgptr(cfgptrSEXP);
    libtiledb_array_consolidate(ctx, uri, cfgptr);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_vacuum
void libtiledb_array_vacuum(XPtr<tiledb::Context> ctx, std::string uri, Nullable<XPtr<tiledb::Config>> cfgptr);
RcppExport SEXP _tiledb_libtiledb_array_vacuum(SEXP ctxSEXP, SEXP uriSEXP, SEXP cfgptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type cfgptr(cfgptrSEXP);
    libtiledb_array_vacuum(ctx, uri, cfgptr);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_put_metadata
bool libtiledb_array_put_metadata(XPtr<tiledb::Array> array, std::string key, SEXP obj);
RcppExport SEXP _tiledb_libtiledb_array_put_metadata(SEXP arraySEXP, SEXP keySEXP, SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_put_metadata(array, key, obj));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_metadata_num
R_xlen_t libtiledb_array_get_metadata_num(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_metadata_num(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_metadata_num(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_metadata_from_index
SEXP libtiledb_array_get_metadata_from_index(XPtr<tiledb::Array> array, int idx);
RcppExport SEXP _tiledb_libtiledb_array_get_metadata_from_index(SEXP arraySEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_metadata_from_index(array, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_metadata_list
SEXP libtiledb_array_get_metadata_list(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_get_metadata_list(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_metadata_list(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_delete_metadata
void libtiledb_array_delete_metadata(XPtr<tiledb::Array> array, std::string key);
RcppExport SEXP _tiledb_libtiledb_array_delete_metadata(SEXP arraySEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    libtiledb_array_delete_metadata(array, key);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_set_open_timestamp_start
XPtr<tiledb::Array> libtiledb_array_set_open_timestamp_start(XPtr<tiledb::Array> array, Rcpp::Datetime tstamp);
RcppExport SEXP _tiledb_libtiledb_array_set_open_timestamp_start(SEXP arraySEXP, SEXP tstampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type tstamp(tstampSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_set_open_timestamp_start(array, tstamp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_timestamp_start
Rcpp::Datetime libtiledb_array_open_timestamp_start(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_open_timestamp_start(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_timestamp_start(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_set_open_timestamp_end
XPtr<tiledb::Array> libtiledb_array_set_open_timestamp_end(XPtr<tiledb::Array> array, Rcpp::Datetime tstamp);
RcppExport SEXP _tiledb_libtiledb_array_set_open_timestamp_end(SEXP arraySEXP, SEXP tstampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type tstamp(tstampSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_set_open_timestamp_end(array, tstamp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_open_timestamp_end
Rcpp::Datetime libtiledb_array_open_timestamp_end(XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_open_timestamp_end(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_open_timestamp_end(array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_delete_fragments
void libtiledb_array_delete_fragments(XPtr<tiledb::Context> ctx, XPtr<tiledb::Array> array, Rcpp::Datetime tstamp_start, Rcpp::Datetime tstamp_end);
RcppExport SEXP _tiledb_libtiledb_array_delete_fragments(SEXP ctxSEXP, SEXP arraySEXP, SEXP tstamp_startSEXP, SEXP tstamp_endSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type tstamp_start(tstamp_startSEXP);
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type tstamp_end(tstamp_endSEXP);
    libtiledb_array_delete_fragments(ctx, array, tstamp_start, tstamp_end);
    return R_NilValue;
END_RCPP
}
// libtiledb_array_has_enumeration
bool libtiledb_array_has_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::Array> arr, const std::string name);
RcppExport SEXP _tiledb_libtiledb_array_has_enumeration(SEXP ctxSEXP, SEXP arrSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< const std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_has_enumeration(ctx, arr, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_get_enumeration
std::vector<std::string> libtiledb_array_get_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::Array> arr, const std::string name);
RcppExport SEXP _tiledb_libtiledb_array_get_enumeration(SEXP ctxSEXP, SEXP arrSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< const std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_get_enumeration(ctx, arr, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_has_enumeration_vector
Rcpp::LogicalVector libtiledb_array_has_enumeration_vector(XPtr<tiledb::Context> ctx, XPtr<tiledb::Array> array);
RcppExport SEXP _tiledb_libtiledb_array_has_enumeration_vector(SEXP ctxSEXP, SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_array_has_enumeration_vector(ctx, array));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_array_upgrade_version
void libtiledb_array_upgrade_version(XPtr<tiledb::Context> ctx, XPtr<tiledb::Array> array, std::string& uri, Rcpp::Nullable<XPtr<tiledb::Config>> cfg);
RcppExport SEXP _tiledb_libtiledb_array_upgrade_version(SEXP ctxSEXP, SEXP arraySEXP, SEXP uriSEXP, SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string& >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<XPtr<tiledb::Config>> >::type cfg(cfgSEXP);
    libtiledb_array_upgrade_version(ctx, array, uri, cfg);
    return R_NilValue;
END_RCPP
}
// libtiledb_query
XPtr<tiledb::Query> libtiledb_query(XPtr<tiledb::Context> ctx, XPtr<tiledb::Array> array, std::string type);
RcppExport SEXP _tiledb_libtiledb_query(SEXP ctxSEXP, SEXP arraySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Array> >::type array(arraySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query(ctx, array, type));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_type
std::string libtiledb_query_type(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_type(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_type(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_layout
XPtr<tiledb::Query> libtiledb_query_set_layout(XPtr<tiledb::Query> query, std::string layout);
RcppExport SEXP _tiledb_libtiledb_query_set_layout(SEXP querySEXP, SEXP layoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type layout(layoutSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_layout(query, layout));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_layout
std::string libtiledb_query_layout(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_layout(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_layout(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_subarray_with_type
XPtr<tiledb::Query> libtiledb_query_set_subarray_with_type(XPtr<tiledb::Query> query, SEXP subarray, std::string typestr);
RcppExport SEXP _tiledb_libtiledb_query_set_subarray_with_type(SEXP querySEXP, SEXP subarraySEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_subarray_with_type(query, subarray, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_subarray
XPtr<tiledb::Query> libtiledb_query_set_subarray(XPtr<tiledb::Query> query, SEXP subarray);
RcppExport SEXP _tiledb_libtiledb_query_set_subarray(SEXP querySEXP, SEXP subarraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< SEXP >::type subarray(subarraySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_subarray(query, subarray));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer
XPtr<tiledb::Query> libtiledb_query_set_buffer(XPtr<tiledb::Query> query, std::string attr, SEXP buffer);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer(SEXP querySEXP, SEXP attrSEXP, SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer(query, attr, buffer));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_char_alloc_direct
XPtr<vlc_buf_t> libtiledb_query_buffer_var_char_alloc_direct(double szoffsets, double szdata, bool nullable, int cols);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_char_alloc_direct(SEXP szoffsetsSEXP, SEXP szdataSEXP, SEXP nullableSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type szoffsets(szoffsetsSEXP);
    Rcpp::traits::input_parameter< double >::type szdata(szdataSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_char_alloc_direct(szoffsets, szdata, nullable, cols));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_char_get_legacy_validity_value
bool libtiledb_query_buffer_var_char_get_legacy_validity_value(XPtr<tiledb::Context> ctx, bool validity_override);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_char_get_legacy_validity_value(SEXP ctxSEXP, SEXP validity_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< bool >::type validity_override(validity_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_char_get_legacy_validity_value(ctx, validity_override));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_char_legacy_validity_mode
XPtr<vlc_buf_t> libtiledb_query_buffer_var_char_legacy_validity_mode(XPtr<tiledb::Context> ctx, XPtr<vlc_buf_t> buf, bool validity_override);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_char_legacy_validity_mode(SEXP ctxSEXP, SEXP bufSEXP, SEXP validity_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< bool >::type validity_override(validity_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_char_legacy_validity_mode(ctx, buf, validity_override));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_char_create
XPtr<vlc_buf_t> libtiledb_query_buffer_var_char_create(CharacterVector vec, bool nullable, bool legacy_validity);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_char_create(SEXP vecSEXP, SEXP nullableSEXP, SEXP legacy_validitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    Rcpp::traits::input_parameter< bool >::type legacy_validity(legacy_validitySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_char_create(vec, nullable, legacy_validity));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer_var_char
XPtr<tiledb::Query> libtiledb_query_set_buffer_var_char(XPtr<tiledb::Query> query, std::string attr, XPtr<vlc_buf_t> bufptr);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer_var_char(SEXP querySEXP, SEXP attrSEXP, SEXP bufptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type bufptr(bufptrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer_var_char(query, attr, bufptr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_var_char
CharacterMatrix libtiledb_query_get_buffer_var_char(XPtr<vlc_buf_t> bufptr, int32_t len, int32_t nchar);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_var_char(SEXP bufptrSEXP, SEXP lenSEXP, SEXP ncharSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type bufptr(bufptrSEXP);
    Rcpp::traits::input_parameter< int32_t >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int32_t >::type nchar(ncharSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_var_char(bufptr, len, nchar));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_var_char_simple
std::string libtiledb_query_get_buffer_var_char_simple(XPtr<vlc_buf_t> bufptr);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_var_char_simple(SEXP bufptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type bufptr(bufptrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_var_char_simple(bufptr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_var_vec_create
XPtr<vlv_buf_t> libtiledb_query_buffer_var_vec_create(IntegerVector intoffsets, SEXP data);
RcppExport SEXP _tiledb_libtiledb_query_buffer_var_vec_create(SEXP intoffsetsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type intoffsets(intoffsetsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_var_vec_create(intoffsets, data));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer_var_vec
XPtr<tiledb::Query> libtiledb_query_set_buffer_var_vec(XPtr<tiledb::Query> query, std::string attr, XPtr<vlv_buf_t> buf);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer_var_vec(SEXP querySEXP, SEXP attrSEXP, SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<vlv_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer_var_vec(query, attr, buf));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_var_vec
List libtiledb_query_get_buffer_var_vec(XPtr<tiledb::Query> query, std::string attr, XPtr<vlv_buf_t> buf);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_var_vec(SEXP querySEXP, SEXP attrSEXP, SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<vlv_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_var_vec(query, attr, buf));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_alloc_ptr
XPtr<query_buf_t> libtiledb_query_buffer_alloc_ptr(std::string domaintype, R_xlen_t ncells, bool nullable, int32_t numvar);
RcppExport SEXP _tiledb_libtiledb_query_buffer_alloc_ptr(SEXP domaintypeSEXP, SEXP ncellsSEXP, SEXP nullableSEXP, SEXP numvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type domaintype(domaintypeSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type ncells(ncellsSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    Rcpp::traits::input_parameter< int32_t >::type numvar(numvarSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_alloc_ptr(domaintype, ncells, nullable, numvar));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_buffer_assign_ptr
XPtr<query_buf_t> libtiledb_query_buffer_assign_ptr(XPtr<query_buf_t> buf, std::string dtype, SEXP vec, bool asint64);
RcppExport SEXP _tiledb_libtiledb_query_buffer_assign_ptr(SEXP bufSEXP, SEXP dtypeSEXP, SEXP vecSEXP, SEXP asint64SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<query_buf_t> >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< bool >::type asint64(asint64SEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_buffer_assign_ptr(buf, dtype, vec, asint64));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_buffer_ptr
XPtr<tiledb::Query> libtiledb_query_set_buffer_ptr(XPtr<tiledb::Query> query, std::string attr, XPtr<query_buf_t> buf);
RcppExport SEXP _tiledb_libtiledb_query_set_buffer_ptr(SEXP querySEXP, SEXP attrSEXP, SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    Rcpp::traits::input_parameter< XPtr<query_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_buffer_ptr(query, attr, buf));
    return rcpp_result_gen;
END_RCPP
}
// length_from_vlcbuf
IntegerVector length_from_vlcbuf(XPtr<vlc_buf_t> buf);
RcppExport SEXP _tiledb_length_from_vlcbuf(SEXP bufSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type buf(bufSEXP);
    rcpp_result_gen = Rcpp::wrap(length_from_vlcbuf(buf));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_buffer_ptr
RObject libtiledb_query_get_buffer_ptr(XPtr<query_buf_t> buf, bool asint64);
RcppExport SEXP _tiledb_libtiledb_query_get_buffer_ptr(SEXP bufSEXP, SEXP asint64SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<query_buf_t> >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< bool >::type asint64(asint64SEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_buffer_ptr(buf, asint64));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_submit
XPtr<tiledb::Query> libtiledb_query_submit(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_submit(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_submit(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_finalize
XPtr<tiledb::Query> libtiledb_query_finalize(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_finalize(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_finalize(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_status
std::string libtiledb_query_status(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_status(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_status(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_result_buffer_elements
R_xlen_t libtiledb_query_result_buffer_elements(XPtr<tiledb::Query> query, std::string attribute, int32_t which);
RcppExport SEXP _tiledb_libtiledb_query_result_buffer_elements(SEXP querySEXP, SEXP attributeSEXP, SEXP whichSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< int32_t >::type which(whichSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_result_buffer_elements(query, attribute, which));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_result_buffer_elements_vec
NumericVector libtiledb_query_result_buffer_elements_vec(XPtr<tiledb::Query> query, std::string attribute, bool nullable);
RcppExport SEXP _tiledb_libtiledb_query_result_buffer_elements_vec(SEXP querySEXP, SEXP attributeSEXP, SEXP nullableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_result_buffer_elements_vec(query, attribute, nullable));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_fragment_num
int libtiledb_query_get_fragment_num(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_get_fragment_num(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_fragment_num(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_fragment_uri
std::string libtiledb_query_get_fragment_uri(XPtr<tiledb::Query> query, int idx);
RcppExport SEXP _tiledb_libtiledb_query_get_fragment_uri(SEXP querySEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_fragment_uri(query, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_fragment_timestamp_range
Rcpp::DatetimeVector libtiledb_query_get_fragment_timestamp_range(XPtr<tiledb::Query> query, int idx);
RcppExport SEXP _tiledb_libtiledb_query_get_fragment_timestamp_range(SEXP querySEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_fragment_timestamp_range(query, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_subarray
XPtr<tiledb::Subarray> libtiledb_subarray(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_subarray(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_subarray(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_subarray_add_range
XPtr<tiledb::Subarray> libtiledb_subarray_add_range(XPtr<tiledb::Subarray> subarr, int iidx, SEXP starts, SEXP ends, SEXP strides);
RcppExport SEXP _tiledb_libtiledb_subarray_add_range(SEXP subarrSEXP, SEXP iidxSEXP, SEXP startsSEXP, SEXP endsSEXP, SEXP stridesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Subarray> >::type subarr(subarrSEXP);
    Rcpp::traits::input_parameter< int >::type iidx(iidxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type strides(stridesSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_subarray_add_range(subarr, iidx, starts, ends, strides));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_subarray_add_range_with_type
XPtr<tiledb::Subarray> libtiledb_subarray_add_range_with_type(XPtr<tiledb::Subarray> subarr, int iidx, std::string typestr, SEXP starts, SEXP ends, SEXP strides);
RcppExport SEXP _tiledb_libtiledb_subarray_add_range_with_type(SEXP subarrSEXP, SEXP iidxSEXP, SEXP typestrSEXP, SEXP startsSEXP, SEXP endsSEXP, SEXP stridesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Subarray> >::type subarr(subarrSEXP);
    Rcpp::traits::input_parameter< int >::type iidx(iidxSEXP);
    Rcpp::traits::input_parameter< std::string >::type typestr(typestrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type strides(stridesSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_subarray_add_range_with_type(subarr, iidx, typestr, starts, ends, strides));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_subarray_object
XPtr<tiledb::Query> libtiledb_query_set_subarray_object(XPtr<tiledb::Query> query, XPtr<tiledb::Subarray> subarr);
RcppExport SEXP _tiledb_libtiledb_query_set_subarray_object(SEXP querySEXP, SEXP subarrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Subarray> >::type subarr(subarrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_subarray_object(query, subarr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_est_result_size
R_xlen_t libtiledb_query_get_est_result_size(XPtr<tiledb::Query> query, std::string attr);
RcppExport SEXP _tiledb_libtiledb_query_get_est_result_size(SEXP querySEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_est_result_size(query, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_est_result_size_nullable
NumericVector libtiledb_query_get_est_result_size_nullable(XPtr<tiledb::Query> query, std::string attr);
RcppExport SEXP _tiledb_libtiledb_query_get_est_result_size_nullable(SEXP querySEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_est_result_size_nullable(query, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_est_result_size_var
NumericVector libtiledb_query_get_est_result_size_var(XPtr<tiledb::Query> query, std::string attr);
RcppExport SEXP _tiledb_libtiledb_query_get_est_result_size_var(SEXP querySEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_est_result_size_var(query, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_est_result_size_var_nullable
NumericVector libtiledb_query_get_est_result_size_var_nullable(XPtr<tiledb::Query> query, std::string attr);
RcppExport SEXP _tiledb_libtiledb_query_get_est_result_size_var_nullable(SEXP querySEXP, SEXP attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attr(attrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_est_result_size_var_nullable(query, attr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_range_num
double libtiledb_query_get_range_num(XPtr<tiledb::Query> query, int dim_idx);
RcppExport SEXP _tiledb_libtiledb_query_get_range_num(SEXP querySEXP, SEXP dim_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type dim_idx(dim_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_range_num(query, dim_idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_range
IntegerVector libtiledb_query_get_range(XPtr<tiledb::Query> query, int dim_idx, int rng_idx);
RcppExport SEXP _tiledb_libtiledb_query_get_range(SEXP querySEXP, SEXP dim_idxSEXP, SEXP rng_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type dim_idx(dim_idxSEXP);
    Rcpp::traits::input_parameter< int >::type rng_idx(rng_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_range(query, dim_idx, rng_idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_range_var
CharacterVector libtiledb_query_get_range_var(XPtr<tiledb::Query> query, int dim_idx, int rng_idx);
RcppExport SEXP _tiledb_libtiledb_query_get_range_var(SEXP querySEXP, SEXP dim_idxSEXP, SEXP rng_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type dim_idx(dim_idxSEXP);
    Rcpp::traits::input_parameter< int >::type rng_idx(rng_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_range_var(query, dim_idx, rng_idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_set_condition
XPtr<tiledb::Query> libtiledb_query_set_condition(XPtr<tiledb::Query> query, XPtr<tiledb::QueryCondition> query_cond);
RcppExport SEXP _tiledb_libtiledb_query_set_condition(SEXP querySEXP, SEXP query_condSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::QueryCondition> >::type query_cond(query_condSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_set_condition(query, query_cond));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_array
XPtr<tiledb::Array> libtiledb_query_get_array(XPtr<tiledb::Query> query, XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_query_get_array(SEXP querySEXP, SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_array(query, ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_schema
XPtr<tiledb::ArraySchema> libtiledb_query_get_schema(XPtr<tiledb::Query> query, XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_query_get_schema(SEXP querySEXP, SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_schema(query, ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_stats
std::string libtiledb_query_stats(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_stats(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_stats(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_get_ctx
XPtr<tiledb::Context> libtiledb_query_get_ctx(XPtr<tiledb::Query> query);
RcppExport SEXP _tiledb_libtiledb_query_get_ctx(SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_get_ctx(query));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_apply_aggregate
SEXP libtiledb_query_apply_aggregate(XPtr<tiledb::Query> query, std::string attribute_name, std::string operator_name, bool nullable);
RcppExport SEXP _tiledb_libtiledb_query_apply_aggregate(SEXP querySEXP, SEXP attribute_nameSEXP, SEXP operator_nameSEXP, SEXP nullableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Query> >::type query(querySEXP);
    Rcpp::traits::input_parameter< std::string >::type attribute_name(attribute_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type operator_name(operator_nameSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_apply_aggregate(query, attribute_name, operator_name, nullable));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_condition
XPtr<tiledb::QueryCondition> libtiledb_query_condition(XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_query_condition(SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_condition(ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_condition_init
void libtiledb_query_condition_init(XPtr<tiledb::QueryCondition> query_cond, const std::string& attr_name, SEXP condition_value, const std::string& cond_val_type, const std::string& cond_op_string);
RcppExport SEXP _tiledb_libtiledb_query_condition_init(SEXP query_condSEXP, SEXP attr_nameSEXP, SEXP condition_valueSEXP, SEXP cond_val_typeSEXP, SEXP cond_op_stringSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::QueryCondition> >::type query_cond(query_condSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type attr_name(attr_nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type condition_value(condition_valueSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type cond_val_type(cond_val_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type cond_op_string(cond_op_stringSEXP);
    libtiledb_query_condition_init(query_cond, attr_name, condition_value, cond_val_type, cond_op_string);
    return R_NilValue;
END_RCPP
}
// libtiledb_query_condition_combine
XPtr<tiledb::QueryCondition> libtiledb_query_condition_combine(XPtr<tiledb::QueryCondition> lhs, XPtr<tiledb::QueryCondition> rhs, const std::string& str);
RcppExport SEXP _tiledb_libtiledb_query_condition_combine(SEXP lhsSEXP, SEXP rhsSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::QueryCondition> >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::QueryCondition> >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_condition_combine(lhs, rhs, str));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_query_condition_set_use_enumeration
void libtiledb_query_condition_set_use_enumeration(XPtr<tiledb::Context> ctx, XPtr<tiledb::QueryCondition> cond, bool use_enumeration);
RcppExport SEXP _tiledb_libtiledb_query_condition_set_use_enumeration(SEXP ctxSEXP, SEXP condSEXP, SEXP use_enumerationSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::QueryCondition> >::type cond(condSEXP);
    Rcpp::traits::input_parameter< bool >::type use_enumeration(use_enumerationSEXP);
    libtiledb_query_condition_set_use_enumeration(ctx, cond, use_enumeration);
    return R_NilValue;
END_RCPP
}
// libtiledb_query_condition_create
XPtr<tiledb::QueryCondition> libtiledb_query_condition_create(XPtr<tiledb::Context> ctx, const std::string& name, SEXP vec, const std::string& cond_op_string);
RcppExport SEXP _tiledb_libtiledb_query_condition_create(SEXP ctxSEXP, SEXP nameSEXP, SEXP vecSEXP, SEXP cond_op_stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type cond_op_string(cond_op_stringSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_query_condition_create(ctx, name, vec, cond_op_string));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_zip_coords_numeric
NumericVector libtiledb_zip_coords_numeric(List coords, R_xlen_t coord_length);
RcppExport SEXP _tiledb_libtiledb_zip_coords_numeric(SEXP coordsSEXP, SEXP coord_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type coord_length(coord_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_zip_coords_numeric(coords, coord_length));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_zip_coords_integer
IntegerVector libtiledb_zip_coords_integer(List coords, R_xlen_t coord_length);
RcppExport SEXP _tiledb_libtiledb_zip_coords_integer(SEXP coordsSEXP, SEXP coord_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type coord_length(coord_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_zip_coords_integer(coords, coord_length));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_create_group
std::string libtiledb_create_group(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_create_group(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_create_group(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_type
std::string libtiledb_object_type(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_object_type(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_type(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_remove
std::string libtiledb_object_remove(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_object_remove(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_remove(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_move
std::string libtiledb_object_move(XPtr<tiledb::Context> ctx, std::string old_uri, std::string new_uri);
RcppExport SEXP _tiledb_libtiledb_object_move(SEXP ctxSEXP, SEXP old_uriSEXP, SEXP new_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type old_uri(old_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_uri(new_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_move(ctx, old_uri, new_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_object_walk
DataFrame libtiledb_object_walk(XPtr<tiledb::Context> ctx, std::string uri, std::string order, bool recursive);
RcppExport SEXP _tiledb_libtiledb_object_walk(SEXP ctxSEXP, SEXP uriSEXP, SEXP orderSEXP, SEXP recursiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type recursive(recursiveSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_object_walk(ctx, uri, order, recursive));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs
XPtr<tiledb::VFS> libtiledb_vfs(XPtr<tiledb::Context> ctx, Nullable<XPtr<tiledb::Config>> config);
RcppExport SEXP _tiledb_libtiledb_vfs(SEXP ctxSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs(ctx, config));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_create_bucket
std::string libtiledb_vfs_create_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_create_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_create_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_remove_bucket
std::string libtiledb_vfs_remove_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_remove_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_remove_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_bucket
bool libtiledb_vfs_is_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_empty_bucket
bool libtiledb_vfs_is_empty_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_empty_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_empty_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_empty_bucket
std::string libtiledb_vfs_empty_bucket(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_empty_bucket(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_empty_bucket(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_create_dir
std::string libtiledb_vfs_create_dir(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_create_dir(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_create_dir(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_dir
bool libtiledb_vfs_is_dir(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_dir(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_dir(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_remove_dir
std::string libtiledb_vfs_remove_dir(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_remove_dir(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_remove_dir(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_is_file
bool libtiledb_vfs_is_file(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_is_file(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_is_file(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_remove_file
std::string libtiledb_vfs_remove_file(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_remove_file(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_remove_file(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_file_size
R_xlen_t libtiledb_vfs_file_size(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_file_size(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_file_size(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_move_file
std::string libtiledb_vfs_move_file(XPtr<tiledb::VFS> vfs, std::string old_uri, std::string new_uri);
RcppExport SEXP _tiledb_libtiledb_vfs_move_file(SEXP vfsSEXP, SEXP old_uriSEXP, SEXP new_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type old_uri(old_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_uri(new_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_move_file(vfs, old_uri, new_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_move_dir
std::string libtiledb_vfs_move_dir(XPtr<tiledb::VFS> vfs, std::string old_uri, std::string new_uri);
RcppExport SEXP _tiledb_libtiledb_vfs_move_dir(SEXP vfsSEXP, SEXP old_uriSEXP, SEXP new_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type old_uri(old_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_uri(new_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_move_dir(vfs, old_uri, new_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_touch
std::string libtiledb_vfs_touch(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_touch(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_touch(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_open
XPtr<vfs_fh_t> libtiledb_vfs_open(XPtr<tiledb::Context> ctxxp, XPtr<tiledb::VFS> vfsxp, std::string uri, std::string mode);
RcppExport SEXP _tiledb_libtiledb_vfs_open(SEXP ctxxpSEXP, SEXP vfsxpSEXP, SEXP uriSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctxxp(ctxxpSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfsxp(vfsxpSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_open(ctxxp, vfsxp, uri, mode));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_close
void libtiledb_vfs_close(XPtr<tiledb::Context> ctxxp, XPtr<vfs_fh_t> fh);
RcppExport SEXP _tiledb_libtiledb_vfs_close(SEXP ctxxpSEXP, SEXP fhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctxxp(ctxxpSEXP);
    Rcpp::traits::input_parameter< XPtr<vfs_fh_t> >::type fh(fhSEXP);
    libtiledb_vfs_close(ctxxp, fh);
    return R_NilValue;
END_RCPP
}
// libtiledb_vfs_write
void libtiledb_vfs_write(XPtr<tiledb::Context> ctxxp, XPtr<vfs_fh_t> fh, Rcpp::IntegerVector vec);
RcppExport SEXP _tiledb_libtiledb_vfs_write(SEXP ctxxpSEXP, SEXP fhSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctxxp(ctxxpSEXP);
    Rcpp::traits::input_parameter< XPtr<vfs_fh_t> >::type fh(fhSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vec(vecSEXP);
    libtiledb_vfs_write(ctxxp, fh, vec);
    return R_NilValue;
END_RCPP
}
// libtiledb_vfs_read
Rcpp::IntegerVector libtiledb_vfs_read(XPtr<tiledb::Context> ctxxp, XPtr<vfs_fh_t> fh, double offset, double nbytes);
RcppExport SEXP _tiledb_libtiledb_vfs_read(SEXP ctxxpSEXP, SEXP fhSEXP, SEXP offsetSEXP, SEXP nbytesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctxxp(ctxxpSEXP);
    Rcpp::traits::input_parameter< XPtr<vfs_fh_t> >::type fh(fhSEXP);
    Rcpp::traits::input_parameter< double >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< double >::type nbytes(nbytesSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_read(ctxxp, fh, offset, nbytes));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_sync
void libtiledb_vfs_sync(XPtr<tiledb::Context> ctxxp, XPtr<vfs_fh_t> fh);
RcppExport SEXP _tiledb_libtiledb_vfs_sync(SEXP ctxxpSEXP, SEXP fhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctxxp(ctxxpSEXP);
    Rcpp::traits::input_parameter< XPtr<vfs_fh_t> >::type fh(fhSEXP);
    libtiledb_vfs_sync(ctxxp, fh);
    return R_NilValue;
END_RCPP
}
// libtiledb_vfs_dir_size
double libtiledb_vfs_dir_size(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_dir_size(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_dir_size(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_ls
std::vector<std::string> libtiledb_vfs_ls(XPtr<tiledb::VFS> vfs, std::string uri);
RcppExport SEXP _tiledb_libtiledb_vfs_ls(SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_ls(vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_copy_file
std::string libtiledb_vfs_copy_file(XPtr<tiledb::VFS> vfs, std::string old_uri, std::string new_uri);
RcppExport SEXP _tiledb_libtiledb_vfs_copy_file(SEXP vfsSEXP, SEXP old_uriSEXP, SEXP new_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< std::string >::type old_uri(old_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_uri(new_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_copy_file(vfs, old_uri, new_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_vfs_fh_free
void libtiledb_vfs_fh_free(XPtr<vfs_fh_t> fhxp);
RcppExport SEXP _tiledb_libtiledb_vfs_fh_free(SEXP fhxpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<vfs_fh_t> >::type fhxp(fhxpSEXP);
    libtiledb_vfs_fh_free(fhxp);
    return R_NilValue;
END_RCPP
}
// libtiledb_vfs_ls_recursive
Rcpp::DataFrame libtiledb_vfs_ls_recursive(XPtr<tiledb::Context> ctx, XPtr<tiledb::VFS> vfs, const std::string& uri);
RcppExport SEXP _tiledb_libtiledb_vfs_ls_recursive(SEXP ctxSEXP, SEXP vfsSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::VFS> >::type vfs(vfsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_vfs_ls_recursive(ctx, vfs, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_stats_enable
void libtiledb_stats_enable();
RcppExport SEXP _tiledb_libtiledb_stats_enable() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    libtiledb_stats_enable();
    return R_NilValue;
END_RCPP
}
// libtiledb_stats_disable
void libtiledb_stats_disable();
RcppExport SEXP _tiledb_libtiledb_stats_disable() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    libtiledb_stats_disable();
    return R_NilValue;
END_RCPP
}
// libtiledb_stats_reset
void libtiledb_stats_reset();
RcppExport SEXP _tiledb_libtiledb_stats_reset() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    libtiledb_stats_reset();
    return R_NilValue;
END_RCPP
}
// libtiledb_stats_dump
void libtiledb_stats_dump(std::string path);
RcppExport SEXP _tiledb_libtiledb_stats_dump(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    libtiledb_stats_dump(path);
    return R_NilValue;
END_RCPP
}
// libtiledb_stats_raw_dump
std::string libtiledb_stats_raw_dump();
RcppExport SEXP _tiledb_libtiledb_stats_raw_dump() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libtiledb_stats_raw_dump());
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_stats_raw_get
std::string libtiledb_stats_raw_get();
RcppExport SEXP _tiledb_libtiledb_stats_raw_get() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libtiledb_stats_raw_get());
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info
XPtr<tiledb::FragmentInfo> libtiledb_fragment_info(XPtr<tiledb::Context> ctx, const std::string& uri);
RcppExport SEXP _tiledb_libtiledb_fragment_info(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_uri
std::string libtiledb_fragment_info_uri(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_uri(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_uri(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_get_non_empty_domain_index
Rcpp::NumericVector libtiledb_fragment_info_get_non_empty_domain_index(XPtr<tiledb::FragmentInfo> fi, int32_t fid, int32_t did, const std::string& typestr);
RcppExport SEXP _tiledb_libtiledb_fragment_info_get_non_empty_domain_index(SEXP fiSEXP, SEXP fidSEXP, SEXP didSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    Rcpp::traits::input_parameter< int32_t >::type did(didSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_get_non_empty_domain_index(fi, fid, did, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_get_non_empty_domain_name
Rcpp::NumericVector libtiledb_fragment_info_get_non_empty_domain_name(XPtr<tiledb::FragmentInfo> fi, int32_t fid, const std::string& dim_name, const std::string& typestr);
RcppExport SEXP _tiledb_libtiledb_fragment_info_get_non_empty_domain_name(SEXP fiSEXP, SEXP fidSEXP, SEXP dim_nameSEXP, SEXP typestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dim_name(dim_nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type typestr(typestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_get_non_empty_domain_name(fi, fid, dim_name, typestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_get_non_empty_domain_var_index
Rcpp::CharacterVector libtiledb_fragment_info_get_non_empty_domain_var_index(XPtr<tiledb::FragmentInfo> fi, int32_t fid, int32_t did);
RcppExport SEXP _tiledb_libtiledb_fragment_info_get_non_empty_domain_var_index(SEXP fiSEXP, SEXP fidSEXP, SEXP didSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    Rcpp::traits::input_parameter< int32_t >::type did(didSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_get_non_empty_domain_var_index(fi, fid, did));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_get_non_empty_domain_var_name
Rcpp::CharacterVector libtiledb_fragment_info_get_non_empty_domain_var_name(XPtr<tiledb::FragmentInfo> fi, int32_t fid, const std::string& dim_name);
RcppExport SEXP _tiledb_libtiledb_fragment_info_get_non_empty_domain_var_name(SEXP fiSEXP, SEXP fidSEXP, SEXP dim_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dim_name(dim_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_get_non_empty_domain_var_name(fi, fid, dim_name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_num
double libtiledb_fragment_info_num(XPtr<tiledb::FragmentInfo> fi);
RcppExport SEXP _tiledb_libtiledb_fragment_info_num(SEXP fiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_num(fi));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_size
double libtiledb_fragment_info_size(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_size(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_size(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_dense
bool libtiledb_fragment_info_dense(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_dense(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_dense(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_sparse
bool libtiledb_fragment_info_sparse(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_sparse(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_sparse(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_timestamp_range
Rcpp::DatetimeVector libtiledb_fragment_info_timestamp_range(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_timestamp_range(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_timestamp_range(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_cell_num
double libtiledb_fragment_info_cell_num(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_cell_num(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_cell_num(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_version
int libtiledb_fragment_info_version(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_version(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_version(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_has_consolidated_metadata
bool libtiledb_fragment_info_has_consolidated_metadata(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_has_consolidated_metadata(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_has_consolidated_metadata(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_unconsolidated_metadata_num
double libtiledb_fragment_info_unconsolidated_metadata_num(XPtr<tiledb::FragmentInfo> fi);
RcppExport SEXP _tiledb_libtiledb_fragment_info_unconsolidated_metadata_num(SEXP fiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_unconsolidated_metadata_num(fi));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_to_vacuum_num
double libtiledb_fragment_info_to_vacuum_num(XPtr<tiledb::FragmentInfo> fi);
RcppExport SEXP _tiledb_libtiledb_fragment_info_to_vacuum_num(SEXP fiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_to_vacuum_num(fi));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_to_vacuum_uri
std::string libtiledb_fragment_info_to_vacuum_uri(XPtr<tiledb::FragmentInfo> fi, int32_t fid);
RcppExport SEXP _tiledb_libtiledb_fragment_info_to_vacuum_uri(SEXP fiSEXP, SEXP fidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    Rcpp::traits::input_parameter< int32_t >::type fid(fidSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_fragment_info_to_vacuum_uri(fi, fid));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_fragment_info_dump
void libtiledb_fragment_info_dump(XPtr<tiledb::FragmentInfo> fi);
RcppExport SEXP _tiledb_libtiledb_fragment_info_dump(SEXP fiSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::FragmentInfo> >::type fi(fiSEXP);
    libtiledb_fragment_info_dump(fi);
    return R_NilValue;
END_RCPP
}
// libtiledb_error_message
std::string libtiledb_error_message(XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_libtiledb_error_message(SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_error_message(ctx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group
XPtr<tiledb::Group> libtiledb_group(XPtr<tiledb::Context> ctx, const std::string& uri, const std::string& querytypestr);
RcppExport SEXP _tiledb_libtiledb_group(SEXP ctxSEXP, SEXP uriSEXP, SEXP querytypestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type querytypestr(querytypestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group(ctx, uri, querytypestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_with_config
XPtr<tiledb::Group> libtiledb_group_with_config(XPtr<tiledb::Context> ctx, const std::string& uri, const std::string& querytypestr, XPtr<tiledb::Config> cfg);
RcppExport SEXP _tiledb_libtiledb_group_with_config(SEXP ctxSEXP, SEXP uriSEXP, SEXP querytypestrSEXP, SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type querytypestr(querytypestrSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_with_config(ctx, uri, querytypestr, cfg));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_open
XPtr<tiledb::Group> libtiledb_group_open(XPtr<tiledb::Group> grp, const std::string& querytypestr);
RcppExport SEXP _tiledb_libtiledb_group_open(SEXP grpSEXP, SEXP querytypestrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type querytypestr(querytypestrSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_open(grp, querytypestr));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_set_config
XPtr<tiledb::Group> libtiledb_group_set_config(XPtr<tiledb::Group> grp, XPtr<tiledb::Config> cfg);
RcppExport SEXP _tiledb_libtiledb_group_set_config(SEXP grpSEXP, SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_set_config(grp, cfg));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_get_config
XPtr<tiledb::Config> libtiledb_group_get_config(XPtr<tiledb::Group> grp);
RcppExport SEXP _tiledb_libtiledb_group_get_config(SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_get_config(grp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_close
XPtr<tiledb::Group> libtiledb_group_close(XPtr<tiledb::Group> grp);
RcppExport SEXP _tiledb_libtiledb_group_close(SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_close(grp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_create
std::string libtiledb_group_create(XPtr<tiledb::Context> ctx, const std::string& uri);
RcppExport SEXP _tiledb_libtiledb_group_create(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_create(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_is_open
bool libtiledb_group_is_open(XPtr<tiledb::Group> grp);
RcppExport SEXP _tiledb_libtiledb_group_is_open(SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_is_open(grp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_uri
std::string libtiledb_group_uri(XPtr<tiledb::Group> grp);
RcppExport SEXP _tiledb_libtiledb_group_uri(SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_uri(grp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_query_type
std::string libtiledb_group_query_type(XPtr<tiledb::Group> grp);
RcppExport SEXP _tiledb_libtiledb_group_query_type(SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_query_type(grp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_put_metadata
bool libtiledb_group_put_metadata(XPtr<tiledb::Group> grp, std::string key, SEXP obj);
RcppExport SEXP _tiledb_libtiledb_group_put_metadata(SEXP grpSEXP, SEXP keySEXP, SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_put_metadata(grp, key, obj));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_delete_metadata
XPtr<tiledb::Group> libtiledb_group_delete_metadata(XPtr<tiledb::Group> grp, std::string key);
RcppExport SEXP _tiledb_libtiledb_group_delete_metadata(SEXP grpSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_delete_metadata(grp, key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_get_metadata
SEXP libtiledb_group_get_metadata(XPtr<tiledb::Group> grp, std::string key);
RcppExport SEXP _tiledb_libtiledb_group_get_metadata(SEXP grpSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_get_metadata(grp, key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_has_metadata
bool libtiledb_group_has_metadata(XPtr<tiledb::Group> grp, std::string key);
RcppExport SEXP _tiledb_libtiledb_group_has_metadata(SEXP grpSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_has_metadata(grp, key));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_metadata_num
double libtiledb_group_metadata_num(XPtr<tiledb::Group> grp);
RcppExport SEXP _tiledb_libtiledb_group_metadata_num(SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_metadata_num(grp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_get_metadata_from_index
SEXP libtiledb_group_get_metadata_from_index(XPtr<tiledb::Group> grp, int idx);
RcppExport SEXP _tiledb_libtiledb_group_get_metadata_from_index(SEXP grpSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_get_metadata_from_index(grp, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_add_member
XPtr<tiledb::Group> libtiledb_group_add_member(XPtr<tiledb::Group> grp, std::string uri, bool relative, Nullable<Rcpp::String> optional_name);
RcppExport SEXP _tiledb_libtiledb_group_add_member(SEXP grpSEXP, SEXP uriSEXP, SEXP relativeSEXP, SEXP optional_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< bool >::type relative(relativeSEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::String> >::type optional_name(optional_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_add_member(grp, uri, relative, optional_name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_remove_member
XPtr<tiledb::Group> libtiledb_group_remove_member(XPtr<tiledb::Group> grp, std::string uri);
RcppExport SEXP _tiledb_libtiledb_group_remove_member(SEXP grpSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_remove_member(grp, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_member_count
double libtiledb_group_member_count(XPtr<tiledb::Group> grp);
RcppExport SEXP _tiledb_libtiledb_group_member_count(SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_member_count(grp));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_member
CharacterVector libtiledb_group_member(XPtr<tiledb::Group> grp, int idx);
RcppExport SEXP _tiledb_libtiledb_group_member(SEXP grpSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_member(grp, idx));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_dump
std::string libtiledb_group_dump(XPtr<tiledb::Group> grp, bool recursive);
RcppExport SEXP _tiledb_libtiledb_group_dump(SEXP grpSEXP, SEXP recursiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< bool >::type recursive(recursiveSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_dump(grp, recursive));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_group_is_relative
bool libtiledb_group_is_relative(XPtr<tiledb::Group> grp, const std::string& name);
RcppExport SEXP _tiledb_libtiledb_group_is_relative(SEXP grpSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Group> >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_group_is_relative(grp, name));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filestore_schema_create
XPtr<tiledb::ArraySchema> libtiledb_filestore_schema_create(XPtr<tiledb::Context> ctx, std::string uri);
RcppExport SEXP _tiledb_libtiledb_filestore_schema_create(SEXP ctxSEXP, SEXP uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type uri(uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filestore_schema_create(ctx, uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filestore_uri_import
bool libtiledb_filestore_uri_import(XPtr<tiledb::Context> ctx, std::string filestore_uri, std::string file_uri);
RcppExport SEXP _tiledb_libtiledb_filestore_uri_import(SEXP ctxSEXP, SEXP filestore_uriSEXP, SEXP file_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type filestore_uri(filestore_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_uri(file_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filestore_uri_import(ctx, filestore_uri, file_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filestore_uri_export
bool libtiledb_filestore_uri_export(XPtr<tiledb::Context> ctx, std::string file_uri, std::string filestore_uri);
RcppExport SEXP _tiledb_libtiledb_filestore_uri_export(SEXP ctxSEXP, SEXP file_uriSEXP, SEXP filestore_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_uri(file_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type filestore_uri(filestore_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filestore_uri_export(ctx, file_uri, filestore_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filestore_buffer_import
bool libtiledb_filestore_buffer_import(XPtr<tiledb::Context> ctx, std::string filestore_uri, std::string buf, size_t size);
RcppExport SEXP _tiledb_libtiledb_filestore_buffer_import(SEXP ctxSEXP, SEXP filestore_uriSEXP, SEXP bufSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type filestore_uri(filestore_uriSEXP);
    Rcpp::traits::input_parameter< std::string >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filestore_buffer_import(ctx, filestore_uri, buf, size));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filestore_buffer_export
std::string libtiledb_filestore_buffer_export(XPtr<tiledb::Context> ctx, std::string filestore_uri, size_t offset, size_t size);
RcppExport SEXP _tiledb_libtiledb_filestore_buffer_export(SEXP ctxSEXP, SEXP filestore_uriSEXP, SEXP offsetSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type filestore_uri(filestore_uriSEXP);
    Rcpp::traits::input_parameter< size_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filestore_buffer_export(ctx, filestore_uri, offset, size));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_filestore_size
size_t libtiledb_filestore_size(XPtr<tiledb::Context> ctx, std::string filestore_uri);
RcppExport SEXP _tiledb_libtiledb_filestore_size(SEXP ctxSEXP, SEXP filestore_uriSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type filestore_uri(filestore_uriSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_filestore_size(ctx, filestore_uri));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_mime_type_to_str
std::string libtiledb_mime_type_to_str(int32_t mime_type);
RcppExport SEXP _tiledb_libtiledb_mime_type_to_str(SEXP mime_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type mime_type(mime_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_mime_type_to_str(mime_type));
    return rcpp_result_gen;
END_RCPP
}
// libtiledb_mime_type_from_str
int32_t libtiledb_mime_type_from_str(std::string mime_type);
RcppExport SEXP _tiledb_libtiledb_mime_type_from_str(SEXP mime_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type mime_type(mime_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(libtiledb_mime_type_from_str(mime_type));
    return rcpp_result_gen;
END_RCPP
}
// vecbuf_to_shmem
void vecbuf_to_shmem(std::string dir, std::string name, XPtr<query_buf_t> buf, int sz, int numvar);
RcppExport SEXP _tiledb_vecbuf_to_shmem(SEXP dirSEXP, SEXP nameSEXP, SEXP bufSEXP, SEXP szSEXP, SEXP numvarSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< XPtr<query_buf_t> >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< int >::type sz(szSEXP);
    Rcpp::traits::input_parameter< int >::type numvar(numvarSEXP);
    vecbuf_to_shmem(dir, name, buf, sz, numvar);
    return R_NilValue;
END_RCPP
}
// vlcbuf_to_shmem
void vlcbuf_to_shmem(std::string dir, std::string name, XPtr<vlc_buf_t> buf, IntegerVector vec);
RcppExport SEXP _tiledb_vlcbuf_to_shmem(SEXP dirSEXP, SEXP nameSEXP, SEXP bufSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< XPtr<vlc_buf_t> >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vec(vecSEXP);
    vlcbuf_to_shmem(dir, name, buf, vec);
    return R_NilValue;
END_RCPP
}
// querybuf_from_shmem
XPtr<query_buf_t> querybuf_from_shmem(std::string path, std::string dtype);
RcppExport SEXP _tiledb_querybuf_from_shmem(SEXP pathSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(querybuf_from_shmem(path, dtype));
    return rcpp_result_gen;
END_RCPP
}
// vlcbuf_from_shmem
XPtr<vlc_buf_t> vlcbuf_from_shmem(std::string datapath, std::string dtype);
RcppExport SEXP _tiledb_vlcbuf_from_shmem(SEXP datapathSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(vlcbuf_from_shmem(datapath, dtype));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tiledb_libtiledb_query_export_buffer", (DL_FUNC) &_tiledb_libtiledb_query_export_buffer, 3},
    {"_tiledb_libtiledb_query_import_buffer", (DL_FUNC) &_tiledb_libtiledb_query_import_buffer, 4},
    {"_tiledb_libtiledb_query_export_arrow_table", (DL_FUNC) &_tiledb_libtiledb_query_export_arrow_table, 3},
    {"_tiledb_libtiledb_to_arrow", (DL_FUNC) &_tiledb_libtiledb_to_arrow, 3},
    {"_tiledb_libtiledb_allocate_column_buffers", (DL_FUNC) &_tiledb_libtiledb_allocate_column_buffers, 5},
    {"_tiledb_nanoarrow2list", (DL_FUNC) &_tiledb_nanoarrow2list, 1},
    {"_tiledb_makeQueryWrapper", (DL_FUNC) &_tiledb_makeQueryWrapper, 1},
    {"_tiledb_libtiledb_query_submit_async", (DL_FUNC) &_tiledb_libtiledb_query_submit_async, 1},
    {"_tiledb_libtiledb_array_create_with_key", (DL_FUNC) &_tiledb_libtiledb_array_create_with_key, 3},
    {"_tiledb_tiledb_datatype_string_to_sizeof", (DL_FUNC) &_tiledb_tiledb_datatype_string_to_sizeof, 1},
    {"_tiledb_tiledb_datatype_R_type", (DL_FUNC) &_tiledb_tiledb_datatype_R_type, 1},
    {"_tiledb_libtiledb_version", (DL_FUNC) &_tiledb_libtiledb_version, 0},
    {"_tiledb_tiledb_datatype_max_value", (DL_FUNC) &_tiledb_tiledb_datatype_max_value, 1},
    {"_tiledb_libtiledb_ctx", (DL_FUNC) &_tiledb_libtiledb_ctx, 1},
    {"_tiledb_libtiledb_ctx_config", (DL_FUNC) &_tiledb_libtiledb_ctx_config, 1},
    {"_tiledb_libtiledb_ctx_is_supported_fs", (DL_FUNC) &_tiledb_libtiledb_ctx_is_supported_fs, 2},
    {"_tiledb_libtiledb_ctx_set_tag", (DL_FUNC) &_tiledb_libtiledb_ctx_set_tag, 3},
    {"_tiledb_libtiledb_ctx_stats", (DL_FUNC) &_tiledb_libtiledb_ctx_stats, 1},
    {"_tiledb_libtiledb_config", (DL_FUNC) &_tiledb_libtiledb_config, 1},
    {"_tiledb_libtiledb_config_save_to_file", (DL_FUNC) &_tiledb_libtiledb_config_save_to_file, 2},
    {"_tiledb_libtiledb_config_load_from_file", (DL_FUNC) &_tiledb_libtiledb_config_load_from_file, 1},
    {"_tiledb_libtiledb_config_vector", (DL_FUNC) &_tiledb_libtiledb_config_vector, 1},
    {"_tiledb_libtiledb_config_set", (DL_FUNC) &_tiledb_libtiledb_config_set, 3},
    {"_tiledb_libtiledb_config_get", (DL_FUNC) &_tiledb_libtiledb_config_get, 2},
    {"_tiledb_libtiledb_config_unset", (DL_FUNC) &_tiledb_libtiledb_config_unset, 2},
    {"_tiledb_libtiledb_config_dump", (DL_FUNC) &_tiledb_libtiledb_config_dump, 1},
    {"_tiledb_libtiledb_as_built_dump", (DL_FUNC) &_tiledb_libtiledb_as_built_dump, 0},
    {"_tiledb_libtiledb_dim", (DL_FUNC) &_tiledb_libtiledb_dim, 5},
    {"_tiledb_libtiledb_dim_get_name", (DL_FUNC) &_tiledb_libtiledb_dim_get_name, 1},
    {"_tiledb_libtiledb_dim_get_domain", (DL_FUNC) &_tiledb_libtiledb_dim_get_domain, 1},
    {"_tiledb_libtiledb_dim_get_tile_extent", (DL_FUNC) &_tiledb_libtiledb_dim_get_tile_extent, 1},
    {"_tiledb_libtiledb_dim_get_datatype", (DL_FUNC) &_tiledb_libtiledb_dim_get_datatype, 1},
    {"_tiledb_dim_domain_subarray", (DL_FUNC) &_tiledb_dim_domain_subarray, 2},
    {"_tiledb_libtiledb_dim_get_cell_val_num", (DL_FUNC) &_tiledb_libtiledb_dim_get_cell_val_num, 1},
    {"_tiledb_libtiledb_dimension_get_filter_list", (DL_FUNC) &_tiledb_libtiledb_dimension_get_filter_list, 1},
    {"_tiledb_libtiledb_dimension_set_filter_list", (DL_FUNC) &_tiledb_libtiledb_dimension_set_filter_list, 2},
    {"_tiledb_libtiledb_domain", (DL_FUNC) &_tiledb_libtiledb_domain, 2},
    {"_tiledb_libtiledb_domain_get_type", (DL_FUNC) &_tiledb_libtiledb_domain_get_type, 1},
    {"_tiledb_libtiledb_domain_get_ndim", (DL_FUNC) &_tiledb_libtiledb_domain_get_ndim, 1},
    {"_tiledb_libtiledb_domain_get_dimension_from_index", (DL_FUNC) &_tiledb_libtiledb_domain_get_dimension_from_index, 2},
    {"_tiledb_libtiledb_domain_get_dimension_from_name", (DL_FUNC) &_tiledb_libtiledb_domain_get_dimension_from_name, 2},
    {"_tiledb_libtiledb_domain_get_dimensions", (DL_FUNC) &_tiledb_libtiledb_domain_get_dimensions, 1},
    {"_tiledb_libtiledb_domain_has_dimension", (DL_FUNC) &_tiledb_libtiledb_domain_has_dimension, 2},
    {"_tiledb_libtiledb_domain_dump", (DL_FUNC) &_tiledb_libtiledb_domain_dump, 1},
    {"_tiledb_libtiledb_filter", (DL_FUNC) &_tiledb_libtiledb_filter, 2},
    {"_tiledb_libtiledb_filter_get_type", (DL_FUNC) &_tiledb_libtiledb_filter_get_type, 1},
    {"_tiledb_libtiledb_filter_get_option", (DL_FUNC) &_tiledb_libtiledb_filter_get_option, 2},
    {"_tiledb_libtiledb_filter_set_option", (DL_FUNC) &_tiledb_libtiledb_filter_set_option, 3},
    {"_tiledb_libtiledb_filter_list", (DL_FUNC) &_tiledb_libtiledb_filter_list, 2},
    {"_tiledb_libtiledb_filter_list_set_max_chunk_size", (DL_FUNC) &_tiledb_libtiledb_filter_list_set_max_chunk_size, 2},
    {"_tiledb_libtiledb_filter_list_get_max_chunk_size", (DL_FUNC) &_tiledb_libtiledb_filter_list_get_max_chunk_size, 1},
    {"_tiledb_libtiledb_filter_list_get_nfilters", (DL_FUNC) &_tiledb_libtiledb_filter_list_get_nfilters, 1},
    {"_tiledb_libtiledb_filter_list_get_filter_from_index", (DL_FUNC) &_tiledb_libtiledb_filter_list_get_filter_from_index, 2},
    {"_tiledb_libtiledb_attribute", (DL_FUNC) &_tiledb_libtiledb_attribute, 6},
    {"_tiledb_libtiledb_attribute_get_name", (DL_FUNC) &_tiledb_libtiledb_attribute_get_name, 1},
    {"_tiledb_libtiledb_attribute_get_type", (DL_FUNC) &_tiledb_libtiledb_attribute_get_type, 1},
    {"_tiledb_libtiledb_attribute_get_cell_size", (DL_FUNC) &_tiledb_libtiledb_attribute_get_cell_size, 1},
    {"_tiledb_libtiledb_attribute_get_filter_list", (DL_FUNC) &_tiledb_libtiledb_attribute_get_filter_list, 1},
    {"_tiledb_libtiledb_attribute_set_filter_list", (DL_FUNC) &_tiledb_libtiledb_attribute_set_filter_list, 2},
    {"_tiledb_libtiledb_attribute_get_cell_val_num", (DL_FUNC) &_tiledb_libtiledb_attribute_get_cell_val_num, 1},
    {"_tiledb_libtiledb_attribute_set_cell_val_num", (DL_FUNC) &_tiledb_libtiledb_attribute_set_cell_val_num, 2},
    {"_tiledb_libtiledb_attribute_is_variable_sized", (DL_FUNC) &_tiledb_libtiledb_attribute_is_variable_sized, 1},
    {"_tiledb_libtiledb_attribute_dump", (DL_FUNC) &_tiledb_libtiledb_attribute_dump, 1},
    {"_tiledb_libtiledb_attribute_set_fill_value", (DL_FUNC) &_tiledb_libtiledb_attribute_set_fill_value, 2},
    {"_tiledb_libtiledb_attribute_get_fill_value", (DL_FUNC) &_tiledb_libtiledb_attribute_get_fill_value, 1},
    {"_tiledb_libtiledb_attribute_set_nullable", (DL_FUNC) &_tiledb_libtiledb_attribute_set_nullable, 2},
    {"_tiledb_libtiledb_attribute_get_nullable", (DL_FUNC) &_tiledb_libtiledb_attribute_get_nullable, 1},
    {"_tiledb_libtiledb_attribute_has_enumeration", (DL_FUNC) &_tiledb_libtiledb_attribute_has_enumeration, 2},
    {"_tiledb_libtiledb_attribute_get_enumeration_type", (DL_FUNC) &_tiledb_libtiledb_attribute_get_enumeration_type, 3},
    {"_tiledb_libtiledb_attribute_get_enumeration_vector", (DL_FUNC) &_tiledb_libtiledb_attribute_get_enumeration_vector, 3},
    {"_tiledb_libtiledb_attribute_get_enumeration", (DL_FUNC) &_tiledb_libtiledb_attribute_get_enumeration, 3},
    {"_tiledb_libtiledb_attribute_set_enumeration", (DL_FUNC) &_tiledb_libtiledb_attribute_set_enumeration, 3},
    {"_tiledb_libtiledb_attribute_is_ordered_enumeration", (DL_FUNC) &_tiledb_libtiledb_attribute_is_ordered_enumeration, 3},
    {"_tiledb_libtiledb_array_schema", (DL_FUNC) &_tiledb_libtiledb_array_schema, 10},
    {"_tiledb_libtiledb_array_schema_create", (DL_FUNC) &_tiledb_libtiledb_array_schema_create, 2},
    {"_tiledb_libtiledb_array_schema_load", (DL_FUNC) &_tiledb_libtiledb_array_schema_load, 2},
    {"_tiledb_libtiledb_array_schema_load_with_key", (DL_FUNC) &_tiledb_libtiledb_array_schema_load_with_key, 3},
    {"_tiledb_libtiledb_array_schema_set_domain", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_domain, 2},
    {"_tiledb_libtiledb_array_schema_get_domain", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_domain, 1},
    {"_tiledb_libtiledb_array_schema_add_attribute", (DL_FUNC) &_tiledb_libtiledb_array_schema_add_attribute, 2},
    {"_tiledb_libtiledb_array_schema_attributes", (DL_FUNC) &_tiledb_libtiledb_array_schema_attributes, 1},
    {"_tiledb_libtiledb_array_schema_get_array_type", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_array_type, 1},
    {"_tiledb_libtiledb_array_schema_set_cell_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_cell_order, 2},
    {"_tiledb_libtiledb_array_schema_get_cell_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_cell_order, 1},
    {"_tiledb_libtiledb_array_schema_set_tile_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_tile_order, 2},
    {"_tiledb_libtiledb_array_schema_get_tile_order", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_tile_order, 1},
    {"_tiledb_libtiledb_array_schema_set_capacity", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_capacity, 2},
    {"_tiledb_libtiledb_array_schema_get_capacity", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_capacity, 1},
    {"_tiledb_libtiledb_array_schema_get_allows_dups", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_allows_dups, 1},
    {"_tiledb_libtiledb_array_schema_set_allows_dups", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_allows_dups, 2},
    {"_tiledb_libtiledb_array_schema_get_coords_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_coords_filter_list, 1},
    {"_tiledb_libtiledb_array_schema_set_coords_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_coords_filter_list, 2},
    {"_tiledb_libtiledb_array_schema_get_offsets_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_offsets_filter_list, 1},
    {"_tiledb_libtiledb_array_schema_set_offsets_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_offsets_filter_list, 2},
    {"_tiledb_libtiledb_array_schema_get_validity_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_validity_filter_list, 1},
    {"_tiledb_libtiledb_array_schema_set_validity_filter_list", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_validity_filter_list, 2},
    {"_tiledb_libtiledb_array_schema_get_attribute_num", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_attribute_num, 1},
    {"_tiledb_libtiledb_array_schema_get_attribute_from_index", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_attribute_from_index, 2},
    {"_tiledb_libtiledb_array_schema_get_attribute_from_name", (DL_FUNC) &_tiledb_libtiledb_array_schema_get_attribute_from_name, 2},
    {"_tiledb_libtiledb_array_schema_has_attribute", (DL_FUNC) &_tiledb_libtiledb_array_schema_has_attribute, 2},
    {"_tiledb_libtiledb_array_schema_sparse", (DL_FUNC) &_tiledb_libtiledb_array_schema_sparse, 1},
    {"_tiledb_libtiledb_array_schema_dump", (DL_FUNC) &_tiledb_libtiledb_array_schema_dump, 1},
    {"_tiledb_libtiledb_array_schema_check", (DL_FUNC) &_tiledb_libtiledb_array_schema_check, 1},
    {"_tiledb_libtiledb_array_schema_version", (DL_FUNC) &_tiledb_libtiledb_array_schema_version, 1},
    {"_tiledb_libtiledb_array_schema_set_enumeration", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_enumeration, 7},
    {"_tiledb_libtiledb_array_schema_set_enumeration_empty", (DL_FUNC) &_tiledb_libtiledb_array_schema_set_enumeration_empty, 7},
    {"_tiledb_libtiledb_array_schema_evolution", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution, 1},
    {"_tiledb_libtiledb_array_schema_evolution_add_attribute", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution_add_attribute, 2},
    {"_tiledb_libtiledb_array_schema_evolution_drop_attribute", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution_drop_attribute, 2},
    {"_tiledb_libtiledb_array_schema_evolution_array_evolve", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution_array_evolve, 2},
    {"_tiledb_libtiledb_array_schema_evolution_add_enumeration", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution_add_enumeration, 6},
    {"_tiledb_libtiledb_array_schema_evolution_add_enumeration_empty", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution_add_enumeration_empty, 6},
    {"_tiledb_libtiledb_array_schema_evolution_drop_enumeration", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution_drop_enumeration, 2},
    {"_tiledb_libtiledb_array_schema_evolution_extend_enumeration", (DL_FUNC) &_tiledb_libtiledb_array_schema_evolution_extend_enumeration, 7},
    {"_tiledb_libtiledb_array_create", (DL_FUNC) &_tiledb_libtiledb_array_create, 2},
    {"_tiledb_libtiledb_array_open", (DL_FUNC) &_tiledb_libtiledb_array_open, 3},
    {"_tiledb_libtiledb_array_open_at", (DL_FUNC) &_tiledb_libtiledb_array_open_at, 4},
    {"_tiledb_libtiledb_array_open_with_key", (DL_FUNC) &_tiledb_libtiledb_array_open_with_key, 4},
    {"_tiledb_libtiledb_array_open_at_with_key", (DL_FUNC) &_tiledb_libtiledb_array_open_at_with_key, 5},
    {"_tiledb_libtiledb_array_open_with_ptr", (DL_FUNC) &_tiledb_libtiledb_array_open_with_ptr, 2},
    {"_tiledb_libtiledb_array_is_open", (DL_FUNC) &_tiledb_libtiledb_array_is_open, 1},
    {"_tiledb_libtiledb_array_is_open_for_reading", (DL_FUNC) &_tiledb_libtiledb_array_is_open_for_reading, 1},
    {"_tiledb_libtiledb_array_is_open_for_writing", (DL_FUNC) &_tiledb_libtiledb_array_is_open_for_writing, 1},
    {"_tiledb_libtiledb_array_get_uri", (DL_FUNC) &_tiledb_libtiledb_array_get_uri, 1},
    {"_tiledb_libtiledb_array_get_schema", (DL_FUNC) &_tiledb_libtiledb_array_get_schema, 1},
    {"_tiledb_libtiledb_array_reopen", (DL_FUNC) &_tiledb_libtiledb_array_reopen, 1},
    {"_tiledb_libtiledb_array_close", (DL_FUNC) &_tiledb_libtiledb_array_close, 1},
    {"_tiledb_libtiledb_array_query_type", (DL_FUNC) &_tiledb_libtiledb_array_query_type, 1},
    {"_tiledb_libtiledb_array_get_non_empty_domain", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain, 1},
    {"_tiledb_libtiledb_array_get_non_empty_domain_var_from_name", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain_var_from_name, 2},
    {"_tiledb_libtiledb_array_get_non_empty_domain_var_from_index", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain_var_from_index, 3},
    {"_tiledb_libtiledb_array_get_non_empty_domain_from_name", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain_from_name, 3},
    {"_tiledb_libtiledb_array_get_non_empty_domain_from_index", (DL_FUNC) &_tiledb_libtiledb_array_get_non_empty_domain_from_index, 3},
    {"_tiledb_libtiledb_array_consolidate", (DL_FUNC) &_tiledb_libtiledb_array_consolidate, 3},
    {"_tiledb_libtiledb_array_vacuum", (DL_FUNC) &_tiledb_libtiledb_array_vacuum, 3},
    {"_tiledb_libtiledb_array_put_metadata", (DL_FUNC) &_tiledb_libtiledb_array_put_metadata, 3},
    {"_tiledb_libtiledb_array_get_metadata_num", (DL_FUNC) &_tiledb_libtiledb_array_get_metadata_num, 1},
    {"_tiledb_libtiledb_array_get_metadata_from_index", (DL_FUNC) &_tiledb_libtiledb_array_get_metadata_from_index, 2},
    {"_tiledb_libtiledb_array_get_metadata_list", (DL_FUNC) &_tiledb_libtiledb_array_get_metadata_list, 1},
    {"_tiledb_libtiledb_array_delete_metadata", (DL_FUNC) &_tiledb_libtiledb_array_delete_metadata, 2},
    {"_tiledb_libtiledb_array_set_open_timestamp_start", (DL_FUNC) &_tiledb_libtiledb_array_set_open_timestamp_start, 2},
    {"_tiledb_libtiledb_array_open_timestamp_start", (DL_FUNC) &_tiledb_libtiledb_array_open_timestamp_start, 1},
    {"_tiledb_libtiledb_array_set_open_timestamp_end", (DL_FUNC) &_tiledb_libtiledb_array_set_open_timestamp_end, 2},
    {"_tiledb_libtiledb_array_open_timestamp_end", (DL_FUNC) &_tiledb_libtiledb_array_open_timestamp_end, 1},
    {"_tiledb_libtiledb_array_delete_fragments", (DL_FUNC) &_tiledb_libtiledb_array_delete_fragments, 4},
    {"_tiledb_libtiledb_array_has_enumeration", (DL_FUNC) &_tiledb_libtiledb_array_has_enumeration, 3},
    {"_tiledb_libtiledb_array_get_enumeration", (DL_FUNC) &_tiledb_libtiledb_array_get_enumeration, 3},
    {"_tiledb_libtiledb_array_has_enumeration_vector", (DL_FUNC) &_tiledb_libtiledb_array_has_enumeration_vector, 2},
    {"_tiledb_libtiledb_array_upgrade_version", (DL_FUNC) &_tiledb_libtiledb_array_upgrade_version, 4},
    {"_tiledb_libtiledb_query", (DL_FUNC) &_tiledb_libtiledb_query, 3},
    {"_tiledb_libtiledb_query_type", (DL_FUNC) &_tiledb_libtiledb_query_type, 1},
    {"_tiledb_libtiledb_query_set_layout", (DL_FUNC) &_tiledb_libtiledb_query_set_layout, 2},
    {"_tiledb_libtiledb_query_layout", (DL_FUNC) &_tiledb_libtiledb_query_layout, 1},
    {"_tiledb_libtiledb_query_set_subarray_with_type", (DL_FUNC) &_tiledb_libtiledb_query_set_subarray_with_type, 3},
    {"_tiledb_libtiledb_query_set_subarray", (DL_FUNC) &_tiledb_libtiledb_query_set_subarray, 2},
    {"_tiledb_libtiledb_query_set_buffer", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer, 3},
    {"_tiledb_libtiledb_query_buffer_var_char_alloc_direct", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_char_alloc_direct, 4},
    {"_tiledb_libtiledb_query_buffer_var_char_get_legacy_validity_value", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_char_get_legacy_validity_value, 2},
    {"_tiledb_libtiledb_query_buffer_var_char_legacy_validity_mode", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_char_legacy_validity_mode, 3},
    {"_tiledb_libtiledb_query_buffer_var_char_create", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_char_create, 3},
    {"_tiledb_libtiledb_query_set_buffer_var_char", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer_var_char, 3},
    {"_tiledb_libtiledb_query_get_buffer_var_char", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_var_char, 3},
    {"_tiledb_libtiledb_query_get_buffer_var_char_simple", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_var_char_simple, 1},
    {"_tiledb_libtiledb_query_buffer_var_vec_create", (DL_FUNC) &_tiledb_libtiledb_query_buffer_var_vec_create, 2},
    {"_tiledb_libtiledb_query_set_buffer_var_vec", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer_var_vec, 3},
    {"_tiledb_libtiledb_query_get_buffer_var_vec", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_var_vec, 3},
    {"_tiledb_libtiledb_query_buffer_alloc_ptr", (DL_FUNC) &_tiledb_libtiledb_query_buffer_alloc_ptr, 4},
    {"_tiledb_libtiledb_query_buffer_assign_ptr", (DL_FUNC) &_tiledb_libtiledb_query_buffer_assign_ptr, 4},
    {"_tiledb_libtiledb_query_set_buffer_ptr", (DL_FUNC) &_tiledb_libtiledb_query_set_buffer_ptr, 3},
    {"_tiledb_length_from_vlcbuf", (DL_FUNC) &_tiledb_length_from_vlcbuf, 1},
    {"_tiledb_libtiledb_query_get_buffer_ptr", (DL_FUNC) &_tiledb_libtiledb_query_get_buffer_ptr, 2},
    {"_tiledb_libtiledb_query_submit", (DL_FUNC) &_tiledb_libtiledb_query_submit, 1},
    {"_tiledb_libtiledb_query_finalize", (DL_FUNC) &_tiledb_libtiledb_query_finalize, 1},
    {"_tiledb_libtiledb_query_status", (DL_FUNC) &_tiledb_libtiledb_query_status, 1},
    {"_tiledb_libtiledb_query_result_buffer_elements", (DL_FUNC) &_tiledb_libtiledb_query_result_buffer_elements, 3},
    {"_tiledb_libtiledb_query_result_buffer_elements_vec", (DL_FUNC) &_tiledb_libtiledb_query_result_buffer_elements_vec, 3},
    {"_tiledb_libtiledb_query_get_fragment_num", (DL_FUNC) &_tiledb_libtiledb_query_get_fragment_num, 1},
    {"_tiledb_libtiledb_query_get_fragment_uri", (DL_FUNC) &_tiledb_libtiledb_query_get_fragment_uri, 2},
    {"_tiledb_libtiledb_query_get_fragment_timestamp_range", (DL_FUNC) &_tiledb_libtiledb_query_get_fragment_timestamp_range, 2},
    {"_tiledb_libtiledb_subarray", (DL_FUNC) &_tiledb_libtiledb_subarray, 1},
    {"_tiledb_libtiledb_subarray_add_range", (DL_FUNC) &_tiledb_libtiledb_subarray_add_range, 5},
    {"_tiledb_libtiledb_subarray_add_range_with_type", (DL_FUNC) &_tiledb_libtiledb_subarray_add_range_with_type, 6},
    {"_tiledb_libtiledb_query_set_subarray_object", (DL_FUNC) &_tiledb_libtiledb_query_set_subarray_object, 2},
    {"_tiledb_libtiledb_query_get_est_result_size", (DL_FUNC) &_tiledb_libtiledb_query_get_est_result_size, 2},
    {"_tiledb_libtiledb_query_get_est_result_size_nullable", (DL_FUNC) &_tiledb_libtiledb_query_get_est_result_size_nullable, 2},
    {"_tiledb_libtiledb_query_get_est_result_size_var", (DL_FUNC) &_tiledb_libtiledb_query_get_est_result_size_var, 2},
    {"_tiledb_libtiledb_query_get_est_result_size_var_nullable", (DL_FUNC) &_tiledb_libtiledb_query_get_est_result_size_var_nullable, 2},
    {"_tiledb_libtiledb_query_get_range_num", (DL_FUNC) &_tiledb_libtiledb_query_get_range_num, 2},
    {"_tiledb_libtiledb_query_get_range", (DL_FUNC) &_tiledb_libtiledb_query_get_range, 3},
    {"_tiledb_libtiledb_query_get_range_var", (DL_FUNC) &_tiledb_libtiledb_query_get_range_var, 3},
    {"_tiledb_libtiledb_query_set_condition", (DL_FUNC) &_tiledb_libtiledb_query_set_condition, 2},
    {"_tiledb_libtiledb_query_get_array", (DL_FUNC) &_tiledb_libtiledb_query_get_array, 2},
    {"_tiledb_libtiledb_query_get_schema", (DL_FUNC) &_tiledb_libtiledb_query_get_schema, 2},
    {"_tiledb_libtiledb_query_stats", (DL_FUNC) &_tiledb_libtiledb_query_stats, 1},
    {"_tiledb_libtiledb_query_get_ctx", (DL_FUNC) &_tiledb_libtiledb_query_get_ctx, 1},
    {"_tiledb_libtiledb_query_apply_aggregate", (DL_FUNC) &_tiledb_libtiledb_query_apply_aggregate, 4},
    {"_tiledb_libtiledb_query_condition", (DL_FUNC) &_tiledb_libtiledb_query_condition, 1},
    {"_tiledb_libtiledb_query_condition_init", (DL_FUNC) &_tiledb_libtiledb_query_condition_init, 5},
    {"_tiledb_libtiledb_query_condition_combine", (DL_FUNC) &_tiledb_libtiledb_query_condition_combine, 3},
    {"_tiledb_libtiledb_query_condition_set_use_enumeration", (DL_FUNC) &_tiledb_libtiledb_query_condition_set_use_enumeration, 3},
    {"_tiledb_libtiledb_query_condition_create", (DL_FUNC) &_tiledb_libtiledb_query_condition_create, 4},
    {"_tiledb_libtiledb_zip_coords_numeric", (DL_FUNC) &_tiledb_libtiledb_zip_coords_numeric, 2},
    {"_tiledb_libtiledb_zip_coords_integer", (DL_FUNC) &_tiledb_libtiledb_zip_coords_integer, 2},
    {"_tiledb_libtiledb_create_group", (DL_FUNC) &_tiledb_libtiledb_create_group, 2},
    {"_tiledb_libtiledb_object_type", (DL_FUNC) &_tiledb_libtiledb_object_type, 2},
    {"_tiledb_libtiledb_object_remove", (DL_FUNC) &_tiledb_libtiledb_object_remove, 2},
    {"_tiledb_libtiledb_object_move", (DL_FUNC) &_tiledb_libtiledb_object_move, 3},
    {"_tiledb_libtiledb_object_walk", (DL_FUNC) &_tiledb_libtiledb_object_walk, 4},
    {"_tiledb_libtiledb_vfs", (DL_FUNC) &_tiledb_libtiledb_vfs, 2},
    {"_tiledb_libtiledb_vfs_create_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_create_bucket, 2},
    {"_tiledb_libtiledb_vfs_remove_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_remove_bucket, 2},
    {"_tiledb_libtiledb_vfs_is_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_is_bucket, 2},
    {"_tiledb_libtiledb_vfs_is_empty_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_is_empty_bucket, 2},
    {"_tiledb_libtiledb_vfs_empty_bucket", (DL_FUNC) &_tiledb_libtiledb_vfs_empty_bucket, 2},
    {"_tiledb_libtiledb_vfs_create_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_create_dir, 2},
    {"_tiledb_libtiledb_vfs_is_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_is_dir, 2},
    {"_tiledb_libtiledb_vfs_remove_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_remove_dir, 2},
    {"_tiledb_libtiledb_vfs_is_file", (DL_FUNC) &_tiledb_libtiledb_vfs_is_file, 2},
    {"_tiledb_libtiledb_vfs_remove_file", (DL_FUNC) &_tiledb_libtiledb_vfs_remove_file, 2},
    {"_tiledb_libtiledb_vfs_file_size", (DL_FUNC) &_tiledb_libtiledb_vfs_file_size, 2},
    {"_tiledb_libtiledb_vfs_move_file", (DL_FUNC) &_tiledb_libtiledb_vfs_move_file, 3},
    {"_tiledb_libtiledb_vfs_move_dir", (DL_FUNC) &_tiledb_libtiledb_vfs_move_dir, 3},
    {"_tiledb_libtiledb_vfs_touch", (DL_FUNC) &_tiledb_libtiledb_vfs_touch, 2},
    {"_tiledb_libtiledb_vfs_open", (DL_FUNC) &_tiledb_libtiledb_vfs_open, 4},
    {"_tiledb_libtiledb_vfs_close", (DL_FUNC) &_tiledb_libtiledb_vfs_close, 2},
    {"_tiledb_libtiledb_vfs_write", (DL_FUNC) &_tiledb_libtiledb_vfs_write, 3},
    {"_tiledb_libtiledb_vfs_read", (DL_FUNC) &_tiledb_libtiledb_vfs_read, 4},
    {"_tiledb_libtiledb_vfs_sync", (DL_FUNC) &_tiledb_libtiledb_vfs_sync, 2},
    {"_tiledb_libtiledb_vfs_dir_size", (DL_FUNC) &_tiledb_libtiledb_vfs_dir_size, 2},
    {"_tiledb_libtiledb_vfs_ls", (DL_FUNC) &_tiledb_libtiledb_vfs_ls, 2},
    {"_tiledb_libtiledb_vfs_copy_file", (DL_FUNC) &_tiledb_libtiledb_vfs_copy_file, 3},
    {"_tiledb_libtiledb_vfs_fh_free", (DL_FUNC) &_tiledb_libtiledb_vfs_fh_free, 1},
    {"_tiledb_libtiledb_vfs_ls_recursive", (DL_FUNC) &_tiledb_libtiledb_vfs_ls_recursive, 3},
    {"_tiledb_libtiledb_stats_enable", (DL_FUNC) &_tiledb_libtiledb_stats_enable, 0},
    {"_tiledb_libtiledb_stats_disable", (DL_FUNC) &_tiledb_libtiledb_stats_disable, 0},
    {"_tiledb_libtiledb_stats_reset", (DL_FUNC) &_tiledb_libtiledb_stats_reset, 0},
    {"_tiledb_libtiledb_stats_dump", (DL_FUNC) &_tiledb_libtiledb_stats_dump, 1},
    {"_tiledb_libtiledb_stats_raw_dump", (DL_FUNC) &_tiledb_libtiledb_stats_raw_dump, 0},
    {"_tiledb_libtiledb_stats_raw_get", (DL_FUNC) &_tiledb_libtiledb_stats_raw_get, 0},
    {"_tiledb_libtiledb_fragment_info", (DL_FUNC) &_tiledb_libtiledb_fragment_info, 2},
    {"_tiledb_libtiledb_fragment_info_uri", (DL_FUNC) &_tiledb_libtiledb_fragment_info_uri, 2},
    {"_tiledb_libtiledb_fragment_info_get_non_empty_domain_index", (DL_FUNC) &_tiledb_libtiledb_fragment_info_get_non_empty_domain_index, 4},
    {"_tiledb_libtiledb_fragment_info_get_non_empty_domain_name", (DL_FUNC) &_tiledb_libtiledb_fragment_info_get_non_empty_domain_name, 4},
    {"_tiledb_libtiledb_fragment_info_get_non_empty_domain_var_index", (DL_FUNC) &_tiledb_libtiledb_fragment_info_get_non_empty_domain_var_index, 3},
    {"_tiledb_libtiledb_fragment_info_get_non_empty_domain_var_name", (DL_FUNC) &_tiledb_libtiledb_fragment_info_get_non_empty_domain_var_name, 3},
    {"_tiledb_libtiledb_fragment_info_num", (DL_FUNC) &_tiledb_libtiledb_fragment_info_num, 1},
    {"_tiledb_libtiledb_fragment_info_size", (DL_FUNC) &_tiledb_libtiledb_fragment_info_size, 2},
    {"_tiledb_libtiledb_fragment_info_dense", (DL_FUNC) &_tiledb_libtiledb_fragment_info_dense, 2},
    {"_tiledb_libtiledb_fragment_info_sparse", (DL_FUNC) &_tiledb_libtiledb_fragment_info_sparse, 2},
    {"_tiledb_libtiledb_fragment_info_timestamp_range", (DL_FUNC) &_tiledb_libtiledb_fragment_info_timestamp_range, 2},
    {"_tiledb_libtiledb_fragment_info_cell_num", (DL_FUNC) &_tiledb_libtiledb_fragment_info_cell_num, 2},
    {"_tiledb_libtiledb_fragment_info_version", (DL_FUNC) &_tiledb_libtiledb_fragment_info_version, 2},
    {"_tiledb_libtiledb_fragment_info_has_consolidated_metadata", (DL_FUNC) &_tiledb_libtiledb_fragment_info_has_consolidated_metadata, 2},
    {"_tiledb_libtiledb_fragment_info_unconsolidated_metadata_num", (DL_FUNC) &_tiledb_libtiledb_fragment_info_unconsolidated_metadata_num, 1},
    {"_tiledb_libtiledb_fragment_info_to_vacuum_num", (DL_FUNC) &_tiledb_libtiledb_fragment_info_to_vacuum_num, 1},
    {"_tiledb_libtiledb_fragment_info_to_vacuum_uri", (DL_FUNC) &_tiledb_libtiledb_fragment_info_to_vacuum_uri, 2},
    {"_tiledb_libtiledb_fragment_info_dump", (DL_FUNC) &_tiledb_libtiledb_fragment_info_dump, 1},
    {"_tiledb_libtiledb_error_message", (DL_FUNC) &_tiledb_libtiledb_error_message, 1},
    {"_tiledb_libtiledb_group", (DL_FUNC) &_tiledb_libtiledb_group, 3},
    {"_tiledb_libtiledb_group_with_config", (DL_FUNC) &_tiledb_libtiledb_group_with_config, 4},
    {"_tiledb_libtiledb_group_open", (DL_FUNC) &_tiledb_libtiledb_group_open, 2},
    {"_tiledb_libtiledb_group_set_config", (DL_FUNC) &_tiledb_libtiledb_group_set_config, 2},
    {"_tiledb_libtiledb_group_get_config", (DL_FUNC) &_tiledb_libtiledb_group_get_config, 1},
    {"_tiledb_libtiledb_group_close", (DL_FUNC) &_tiledb_libtiledb_group_close, 1},
    {"_tiledb_libtiledb_group_create", (DL_FUNC) &_tiledb_libtiledb_group_create, 2},
    {"_tiledb_libtiledb_group_is_open", (DL_FUNC) &_tiledb_libtiledb_group_is_open, 1},
    {"_tiledb_libtiledb_group_uri", (DL_FUNC) &_tiledb_libtiledb_group_uri, 1},
    {"_tiledb_libtiledb_group_query_type", (DL_FUNC) &_tiledb_libtiledb_group_query_type, 1},
    {"_tiledb_libtiledb_group_put_metadata", (DL_FUNC) &_tiledb_libtiledb_group_put_metadata, 3},
    {"_tiledb_libtiledb_group_delete_metadata", (DL_FUNC) &_tiledb_libtiledb_group_delete_metadata, 2},
    {"_tiledb_libtiledb_group_get_metadata", (DL_FUNC) &_tiledb_libtiledb_group_get_metadata, 2},
    {"_tiledb_libtiledb_group_has_metadata", (DL_FUNC) &_tiledb_libtiledb_group_has_metadata, 2},
    {"_tiledb_libtiledb_group_metadata_num", (DL_FUNC) &_tiledb_libtiledb_group_metadata_num, 1},
    {"_tiledb_libtiledb_group_get_metadata_from_index", (DL_FUNC) &_tiledb_libtiledb_group_get_metadata_from_index, 2},
    {"_tiledb_libtiledb_group_add_member", (DL_FUNC) &_tiledb_libtiledb_group_add_member, 4},
    {"_tiledb_libtiledb_group_remove_member", (DL_FUNC) &_tiledb_libtiledb_group_remove_member, 2},
    {"_tiledb_libtiledb_group_member_count", (DL_FUNC) &_tiledb_libtiledb_group_member_count, 1},
    {"_tiledb_libtiledb_group_member", (DL_FUNC) &_tiledb_libtiledb_group_member, 2},
    {"_tiledb_libtiledb_group_dump", (DL_FUNC) &_tiledb_libtiledb_group_dump, 2},
    {"_tiledb_libtiledb_group_is_relative", (DL_FUNC) &_tiledb_libtiledb_group_is_relative, 2},
    {"_tiledb_libtiledb_filestore_schema_create", (DL_FUNC) &_tiledb_libtiledb_filestore_schema_create, 2},
    {"_tiledb_libtiledb_filestore_uri_import", (DL_FUNC) &_tiledb_libtiledb_filestore_uri_import, 3},
    {"_tiledb_libtiledb_filestore_uri_export", (DL_FUNC) &_tiledb_libtiledb_filestore_uri_export, 3},
    {"_tiledb_libtiledb_filestore_buffer_import", (DL_FUNC) &_tiledb_libtiledb_filestore_buffer_import, 4},
    {"_tiledb_libtiledb_filestore_buffer_export", (DL_FUNC) &_tiledb_libtiledb_filestore_buffer_export, 4},
    {"_tiledb_libtiledb_filestore_size", (DL_FUNC) &_tiledb_libtiledb_filestore_size, 2},
    {"_tiledb_libtiledb_mime_type_to_str", (DL_FUNC) &_tiledb_libtiledb_mime_type_to_str, 1},
    {"_tiledb_libtiledb_mime_type_from_str", (DL_FUNC) &_tiledb_libtiledb_mime_type_from_str, 1},
    {"_tiledb_vecbuf_to_shmem", (DL_FUNC) &_tiledb_vecbuf_to_shmem, 5},
    {"_tiledb_vlcbuf_to_shmem", (DL_FUNC) &_tiledb_vlcbuf_to_shmem, 4},
    {"_tiledb_querybuf_from_shmem", (DL_FUNC) &_tiledb_querybuf_from_shmem, 2},
    {"_tiledb_vlcbuf_from_shmem", (DL_FUNC) &_tiledb_vlcbuf_from_shmem, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tiledb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
